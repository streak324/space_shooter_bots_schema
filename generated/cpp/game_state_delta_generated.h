// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTATEDELTA_H_
#define FLATBUFFERS_GENERATED_GAMESTATEDELTA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Vec2;
struct Vec2Builder;

struct FlagUpdate;
struct FlagUpdateBuilder;

struct EntityUpdate;
struct EntityUpdateBuilder;

struct DamagedBlock;
struct DamagedBlockBuilder;

struct ShieldUpdate;
struct ShieldUpdateBuilder;

struct MissileSlotUpdate;
struct MissileSlotUpdateBuilder;

struct TurretUpdate;
struct TurretUpdateBuilder;

struct NewExplosion;
struct NewExplosionBuilder;

struct NewProjectile;
struct NewProjectileBuilder;

struct DeadProjectile;
struct DeadProjectileBuilder;

struct GameStateDelta;
struct GameStateDeltaBuilder;

struct Vec2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vec2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct Vec2Builder {
  typedef Vec2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Vec2::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Vec2::VT_Y, y, 0.0f);
  }
  explicit Vec2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vec2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vec2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vec2> CreateVec2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  Vec2Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct FlagUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlagUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OWNER_ID = 4,
    VT_X = 6,
    VT_Y = 8
  };
  uint8_t owner_id() const {
    return GetField<uint8_t>(VT_OWNER_ID, 0);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OWNER_ID, 1) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct FlagUpdateBuilder {
  typedef FlagUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_owner_id(uint8_t owner_id) {
    fbb_.AddElement<uint8_t>(FlagUpdate::VT_OWNER_ID, owner_id, 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(FlagUpdate::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(FlagUpdate::VT_Y, y, 0.0f);
  }
  explicit FlagUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlagUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlagUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlagUpdate> CreateFlagUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t owner_id = 0,
    float x = 0.0f,
    float y = 0.0f) {
  FlagUpdateBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_owner_id(owner_id);
  return builder_.Finish();
}

struct EntityUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_X = 6,
    VT_Y = 8,
    VT_ROTATION = 10,
    VT_DAMAGED_BLOCKS = 12,
    VT_SHIELD_UPDATES = 14,
    VT_MISSILE_SLOT_UPDATES = 16,
    VT_TURRET_UPDATES = 18
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<DamagedBlock>> *damaged_blocks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DamagedBlock>> *>(VT_DAMAGED_BLOCKS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ShieldUpdate>> *shield_updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ShieldUpdate>> *>(VT_SHIELD_UPDATES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<MissileSlotUpdate>> *missile_slot_updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MissileSlotUpdate>> *>(VT_MISSILE_SLOT_UPDATES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<TurretUpdate>> *turret_updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TurretUpdate>> *>(VT_TURRET_UPDATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyOffset(verifier, VT_DAMAGED_BLOCKS) &&
           verifier.VerifyVector(damaged_blocks()) &&
           verifier.VerifyVectorOfTables(damaged_blocks()) &&
           VerifyOffset(verifier, VT_SHIELD_UPDATES) &&
           verifier.VerifyVector(shield_updates()) &&
           verifier.VerifyVectorOfTables(shield_updates()) &&
           VerifyOffset(verifier, VT_MISSILE_SLOT_UPDATES) &&
           verifier.VerifyVector(missile_slot_updates()) &&
           verifier.VerifyVectorOfTables(missile_slot_updates()) &&
           VerifyOffset(verifier, VT_TURRET_UPDATES) &&
           verifier.VerifyVector(turret_updates()) &&
           verifier.VerifyVectorOfTables(turret_updates()) &&
           verifier.EndTable();
  }
};

struct EntityUpdateBuilder {
  typedef EntityUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(EntityUpdate::VT_ID, id, 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(EntityUpdate::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(EntityUpdate::VT_Y, y, 0.0f);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(EntityUpdate::VT_ROTATION, rotation, 0.0f);
  }
  void add_damaged_blocks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DamagedBlock>>> damaged_blocks) {
    fbb_.AddOffset(EntityUpdate::VT_DAMAGED_BLOCKS, damaged_blocks);
  }
  void add_shield_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ShieldUpdate>>> shield_updates) {
    fbb_.AddOffset(EntityUpdate::VT_SHIELD_UPDATES, shield_updates);
  }
  void add_missile_slot_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MissileSlotUpdate>>> missile_slot_updates) {
    fbb_.AddOffset(EntityUpdate::VT_MISSILE_SLOT_UPDATES, missile_slot_updates);
  }
  void add_turret_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TurretUpdate>>> turret_updates) {
    fbb_.AddOffset(EntityUpdate::VT_TURRET_UPDATES, turret_updates);
  }
  explicit EntityUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityUpdate> CreateEntityUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    float x = 0.0f,
    float y = 0.0f,
    float rotation = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DamagedBlock>>> damaged_blocks = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ShieldUpdate>>> shield_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MissileSlotUpdate>>> missile_slot_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TurretUpdate>>> turret_updates = 0) {
  EntityUpdateBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_turret_updates(turret_updates);
  builder_.add_missile_slot_updates(missile_slot_updates);
  builder_.add_shield_updates(shield_updates);
  builder_.add_damaged_blocks(damaged_blocks);
  builder_.add_rotation(rotation);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EntityUpdate> CreateEntityUpdateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    float x = 0.0f,
    float y = 0.0f,
    float rotation = 0.0f,
    const std::vector<::flatbuffers::Offset<DamagedBlock>> *damaged_blocks = nullptr,
    const std::vector<::flatbuffers::Offset<ShieldUpdate>> *shield_updates = nullptr,
    const std::vector<::flatbuffers::Offset<MissileSlotUpdate>> *missile_slot_updates = nullptr,
    const std::vector<::flatbuffers::Offset<TurretUpdate>> *turret_updates = nullptr) {
  auto damaged_blocks__ = damaged_blocks ? _fbb.CreateVector<::flatbuffers::Offset<DamagedBlock>>(*damaged_blocks) : 0;
  auto shield_updates__ = shield_updates ? _fbb.CreateVector<::flatbuffers::Offset<ShieldUpdate>>(*shield_updates) : 0;
  auto missile_slot_updates__ = missile_slot_updates ? _fbb.CreateVector<::flatbuffers::Offset<MissileSlotUpdate>>(*missile_slot_updates) : 0;
  auto turret_updates__ = turret_updates ? _fbb.CreateVector<::flatbuffers::Offset<TurretUpdate>>(*turret_updates) : 0;
  return CreateEntityUpdate(
      _fbb,
      id,
      x,
      y,
      rotation,
      damaged_blocks__,
      shield_updates__,
      missile_slot_updates__,
      turret_updates__);
}

struct DamagedBlock FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DamagedBlockBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCK_INDEX = 4,
    VT_HITPOINTS = 6,
    VT_APPLIED_THRUST = 8,
    VT_IS_DESTROYED = 10
  };
  uint16_t block_index() const {
    return GetField<uint16_t>(VT_BLOCK_INDEX, 0);
  }
  float hitpoints() const {
    return GetField<float>(VT_HITPOINTS, 0.0f);
  }
  float applied_thrust() const {
    return GetField<float>(VT_APPLIED_THRUST, 0.0f);
  }
  bool is_destroyed() const {
    return GetField<uint8_t>(VT_IS_DESTROYED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_BLOCK_INDEX, 2) &&
           VerifyField<float>(verifier, VT_HITPOINTS, 4) &&
           VerifyField<float>(verifier, VT_APPLIED_THRUST, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_DESTROYED, 1) &&
           verifier.EndTable();
  }
};

struct DamagedBlockBuilder {
  typedef DamagedBlock Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_block_index(uint16_t block_index) {
    fbb_.AddElement<uint16_t>(DamagedBlock::VT_BLOCK_INDEX, block_index, 0);
  }
  void add_hitpoints(float hitpoints) {
    fbb_.AddElement<float>(DamagedBlock::VT_HITPOINTS, hitpoints, 0.0f);
  }
  void add_applied_thrust(float applied_thrust) {
    fbb_.AddElement<float>(DamagedBlock::VT_APPLIED_THRUST, applied_thrust, 0.0f);
  }
  void add_is_destroyed(bool is_destroyed) {
    fbb_.AddElement<uint8_t>(DamagedBlock::VT_IS_DESTROYED, static_cast<uint8_t>(is_destroyed), 0);
  }
  explicit DamagedBlockBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DamagedBlock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DamagedBlock>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DamagedBlock> CreateDamagedBlock(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t block_index = 0,
    float hitpoints = 0.0f,
    float applied_thrust = 0.0f,
    bool is_destroyed = false) {
  DamagedBlockBuilder builder_(_fbb);
  builder_.add_applied_thrust(applied_thrust);
  builder_.add_hitpoints(hitpoints);
  builder_.add_block_index(block_index);
  builder_.add_is_destroyed(is_destroyed);
  return builder_.Finish();
}

struct ShieldUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ShieldUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCK_INDEX = 4,
    VT_HITPOINTS = 6,
    VT_ROTATION = 8,
    VT_IS_DESTROYED = 10
  };
  uint16_t block_index() const {
    return GetField<uint16_t>(VT_BLOCK_INDEX, 0);
  }
  float hitpoints() const {
    return GetField<float>(VT_HITPOINTS, 0.0f);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool is_destroyed() const {
    return GetField<uint8_t>(VT_IS_DESTROYED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_BLOCK_INDEX, 2) &&
           VerifyField<float>(verifier, VT_HITPOINTS, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_DESTROYED, 1) &&
           verifier.EndTable();
  }
};

struct ShieldUpdateBuilder {
  typedef ShieldUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_block_index(uint16_t block_index) {
    fbb_.AddElement<uint16_t>(ShieldUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  void add_hitpoints(float hitpoints) {
    fbb_.AddElement<float>(ShieldUpdate::VT_HITPOINTS, hitpoints, 0.0f);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(ShieldUpdate::VT_ROTATION, rotation, 0.0f);
  }
  void add_is_destroyed(bool is_destroyed) {
    fbb_.AddElement<uint8_t>(ShieldUpdate::VT_IS_DESTROYED, static_cast<uint8_t>(is_destroyed), 0);
  }
  explicit ShieldUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ShieldUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ShieldUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ShieldUpdate> CreateShieldUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t block_index = 0,
    float hitpoints = 0.0f,
    float rotation = 0.0f,
    bool is_destroyed = false) {
  ShieldUpdateBuilder builder_(_fbb);
  builder_.add_rotation(rotation);
  builder_.add_hitpoints(hitpoints);
  builder_.add_block_index(block_index);
  builder_.add_is_destroyed(is_destroyed);
  return builder_.Finish();
}

struct MissileSlotUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MissileSlotUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCK_INDEX = 4,
    VT_SLOT_INDEX = 6,
    VT_IS_LOADED = 8,
    VT_ROTATION = 10
  };
  uint16_t block_index() const {
    return GetField<uint16_t>(VT_BLOCK_INDEX, 0);
  }
  uint8_t slot_index() const {
    return GetField<uint8_t>(VT_SLOT_INDEX, 0);
  }
  bool is_loaded() const {
    return GetField<uint8_t>(VT_IS_LOADED, 0) != 0;
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_BLOCK_INDEX, 2) &&
           VerifyField<uint8_t>(verifier, VT_SLOT_INDEX, 1) &&
           VerifyField<uint8_t>(verifier, VT_IS_LOADED, 1) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           verifier.EndTable();
  }
};

struct MissileSlotUpdateBuilder {
  typedef MissileSlotUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_block_index(uint16_t block_index) {
    fbb_.AddElement<uint16_t>(MissileSlotUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  void add_slot_index(uint8_t slot_index) {
    fbb_.AddElement<uint8_t>(MissileSlotUpdate::VT_SLOT_INDEX, slot_index, 0);
  }
  void add_is_loaded(bool is_loaded) {
    fbb_.AddElement<uint8_t>(MissileSlotUpdate::VT_IS_LOADED, static_cast<uint8_t>(is_loaded), 0);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(MissileSlotUpdate::VT_ROTATION, rotation, 0.0f);
  }
  explicit MissileSlotUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MissileSlotUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MissileSlotUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MissileSlotUpdate> CreateMissileSlotUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t block_index = 0,
    uint8_t slot_index = 0,
    bool is_loaded = false,
    float rotation = 0.0f) {
  MissileSlotUpdateBuilder builder_(_fbb);
  builder_.add_rotation(rotation);
  builder_.add_block_index(block_index);
  builder_.add_is_loaded(is_loaded);
  builder_.add_slot_index(slot_index);
  return builder_.Finish();
}

struct TurretUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TurretUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCK_INDEX = 4,
    VT_ROTATION = 6
  };
  uint16_t block_index() const {
    return GetField<uint16_t>(VT_BLOCK_INDEX, 0);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_BLOCK_INDEX, 2) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           verifier.EndTable();
  }
};

struct TurretUpdateBuilder {
  typedef TurretUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_block_index(uint16_t block_index) {
    fbb_.AddElement<uint16_t>(TurretUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(TurretUpdate::VT_ROTATION, rotation, 0.0f);
  }
  explicit TurretUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TurretUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TurretUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TurretUpdate> CreateTurretUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t block_index = 0,
    float rotation = 0.0f) {
  TurretUpdateBuilder builder_(_fbb);
  builder_.add_rotation(rotation);
  builder_.add_block_index(block_index);
  return builder_.Finish();
}

struct NewExplosion FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NewExplosionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_RADIUS = 6,
    VT_DAMAGE = 8
  };
  const Vec2 *position() const {
    return GetPointer<const Vec2 *>(VT_POSITION);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  float damage() const {
    return GetField<float>(VT_DAMAGE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           VerifyField<float>(verifier, VT_DAMAGE, 4) &&
           verifier.EndTable();
  }
};

struct NewExplosionBuilder {
  typedef NewExplosion Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<Vec2> position) {
    fbb_.AddOffset(NewExplosion::VT_POSITION, position);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(NewExplosion::VT_RADIUS, radius, 0.0f);
  }
  void add_damage(float damage) {
    fbb_.AddElement<float>(NewExplosion::VT_DAMAGE, damage, 0.0f);
  }
  explicit NewExplosionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NewExplosion> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NewExplosion>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NewExplosion> CreateNewExplosion(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Vec2> position = 0,
    float radius = 0.0f,
    float damage = 0.0f) {
  NewExplosionBuilder builder_(_fbb);
  builder_.add_damage(damage);
  builder_.add_radius(radius);
  builder_.add_position(position);
  return builder_.Finish();
}

struct NewProjectile FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NewProjectileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POSITION = 6,
    VT_LINEAR_VELOCITY = 8,
    VT_DAMAGE = 10,
    VT_SIZE = 12
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Vec2 *position() const {
    return GetPointer<const Vec2 *>(VT_POSITION);
  }
  const Vec2 *linear_velocity() const {
    return GetPointer<const Vec2 *>(VT_LINEAR_VELOCITY);
  }
  float damage() const {
    return GetField<float>(VT_DAMAGE, 0.0f);
  }
  float size() const {
    return GetField<float>(VT_SIZE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_LINEAR_VELOCITY) &&
           verifier.VerifyTable(linear_velocity()) &&
           VerifyField<float>(verifier, VT_DAMAGE, 4) &&
           VerifyField<float>(verifier, VT_SIZE, 4) &&
           verifier.EndTable();
  }
};

struct NewProjectileBuilder {
  typedef NewProjectile Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(NewProjectile::VT_ID, id, 0);
  }
  void add_position(::flatbuffers::Offset<Vec2> position) {
    fbb_.AddOffset(NewProjectile::VT_POSITION, position);
  }
  void add_linear_velocity(::flatbuffers::Offset<Vec2> linear_velocity) {
    fbb_.AddOffset(NewProjectile::VT_LINEAR_VELOCITY, linear_velocity);
  }
  void add_damage(float damage) {
    fbb_.AddElement<float>(NewProjectile::VT_DAMAGE, damage, 0.0f);
  }
  void add_size(float size) {
    fbb_.AddElement<float>(NewProjectile::VT_SIZE, size, 0.0f);
  }
  explicit NewProjectileBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NewProjectile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NewProjectile>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NewProjectile> CreateNewProjectile(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<Vec2> position = 0,
    ::flatbuffers::Offset<Vec2> linear_velocity = 0,
    float damage = 0.0f,
    float size = 0.0f) {
  NewProjectileBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_size(size);
  builder_.add_damage(damage);
  builder_.add_linear_velocity(linear_velocity);
  builder_.add_position(position);
  return builder_.Finish();
}

struct DeadProjectile FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeadProjectileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POSITION = 6
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Vec2 *position() const {
    return GetPointer<const Vec2 *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           verifier.EndTable();
  }
};

struct DeadProjectileBuilder {
  typedef DeadProjectile Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(DeadProjectile::VT_ID, id, 0);
  }
  void add_position(::flatbuffers::Offset<Vec2> position) {
    fbb_.AddOffset(DeadProjectile::VT_POSITION, position);
  }
  explicit DeadProjectileBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeadProjectile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeadProjectile>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeadProjectile> CreateDeadProjectile(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    ::flatbuffers::Offset<Vec2> position = 0) {
  DeadProjectileBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_position(position);
  return builder_.Finish();
}

struct GameStateDelta FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameStateDeltaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TICK = 4,
    VT_FLAG_POSITIONS = 6,
    VT_ENTITY_POSITIONS = 8,
    VT_NEW_PROJECTILES = 10,
    VT_DEAD_PROJECTILES = 12,
    VT_NEW_EXPLOSIONS = 14
  };
  uint32_t tick() const {
    return GetField<uint32_t>(VT_TICK, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlagUpdate>> *flag_positions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlagUpdate>> *>(VT_FLAG_POSITIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>> *entity_positions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>> *>(VT_ENTITY_POSITIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<NewProjectile>> *new_projectiles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<NewProjectile>> *>(VT_NEW_PROJECTILES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>> *dead_projectiles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>> *>(VT_DEAD_PROJECTILES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<NewExplosion>> *new_explosions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<NewExplosion>> *>(VT_NEW_EXPLOSIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TICK, 4) &&
           VerifyOffset(verifier, VT_FLAG_POSITIONS) &&
           verifier.VerifyVector(flag_positions()) &&
           verifier.VerifyVectorOfTables(flag_positions()) &&
           VerifyOffset(verifier, VT_ENTITY_POSITIONS) &&
           verifier.VerifyVector(entity_positions()) &&
           verifier.VerifyVectorOfTables(entity_positions()) &&
           VerifyOffset(verifier, VT_NEW_PROJECTILES) &&
           verifier.VerifyVector(new_projectiles()) &&
           verifier.VerifyVectorOfTables(new_projectiles()) &&
           VerifyOffset(verifier, VT_DEAD_PROJECTILES) &&
           verifier.VerifyVector(dead_projectiles()) &&
           verifier.VerifyVectorOfTables(dead_projectiles()) &&
           VerifyOffset(verifier, VT_NEW_EXPLOSIONS) &&
           verifier.VerifyVector(new_explosions()) &&
           verifier.VerifyVectorOfTables(new_explosions()) &&
           verifier.EndTable();
  }
};

struct GameStateDeltaBuilder {
  typedef GameStateDelta Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tick(uint32_t tick) {
    fbb_.AddElement<uint32_t>(GameStateDelta::VT_TICK, tick, 0);
  }
  void add_flag_positions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlagUpdate>>> flag_positions) {
    fbb_.AddOffset(GameStateDelta::VT_FLAG_POSITIONS, flag_positions);
  }
  void add_entity_positions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>>> entity_positions) {
    fbb_.AddOffset(GameStateDelta::VT_ENTITY_POSITIONS, entity_positions);
  }
  void add_new_projectiles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NewProjectile>>> new_projectiles) {
    fbb_.AddOffset(GameStateDelta::VT_NEW_PROJECTILES, new_projectiles);
  }
  void add_dead_projectiles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>>> dead_projectiles) {
    fbb_.AddOffset(GameStateDelta::VT_DEAD_PROJECTILES, dead_projectiles);
  }
  void add_new_explosions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NewExplosion>>> new_explosions) {
    fbb_.AddOffset(GameStateDelta::VT_NEW_EXPLOSIONS, new_explosions);
  }
  explicit GameStateDeltaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameStateDelta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameStateDelta>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameStateDelta> CreateGameStateDelta(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t tick = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlagUpdate>>> flag_positions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>>> entity_positions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NewProjectile>>> new_projectiles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>>> dead_projectiles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NewExplosion>>> new_explosions = 0) {
  GameStateDeltaBuilder builder_(_fbb);
  builder_.add_new_explosions(new_explosions);
  builder_.add_dead_projectiles(dead_projectiles);
  builder_.add_new_projectiles(new_projectiles);
  builder_.add_entity_positions(entity_positions);
  builder_.add_flag_positions(flag_positions);
  builder_.add_tick(tick);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameStateDelta> CreateGameStateDeltaDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t tick = 0,
    const std::vector<::flatbuffers::Offset<FlagUpdate>> *flag_positions = nullptr,
    const std::vector<::flatbuffers::Offset<EntityUpdate>> *entity_positions = nullptr,
    const std::vector<::flatbuffers::Offset<NewProjectile>> *new_projectiles = nullptr,
    const std::vector<::flatbuffers::Offset<DeadProjectile>> *dead_projectiles = nullptr,
    const std::vector<::flatbuffers::Offset<NewExplosion>> *new_explosions = nullptr) {
  auto flag_positions__ = flag_positions ? _fbb.CreateVector<::flatbuffers::Offset<FlagUpdate>>(*flag_positions) : 0;
  auto entity_positions__ = entity_positions ? _fbb.CreateVector<::flatbuffers::Offset<EntityUpdate>>(*entity_positions) : 0;
  auto new_projectiles__ = new_projectiles ? _fbb.CreateVector<::flatbuffers::Offset<NewProjectile>>(*new_projectiles) : 0;
  auto dead_projectiles__ = dead_projectiles ? _fbb.CreateVector<::flatbuffers::Offset<DeadProjectile>>(*dead_projectiles) : 0;
  auto new_explosions__ = new_explosions ? _fbb.CreateVector<::flatbuffers::Offset<NewExplosion>>(*new_explosions) : 0;
  return CreateGameStateDelta(
      _fbb,
      tick,
      flag_positions__,
      entity_positions__,
      new_projectiles__,
      dead_projectiles__,
      new_explosions__);
}

#endif  // FLATBUFFERS_GENERATED_GAMESTATEDELTA_H_
