// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Block {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Block {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBlock(bb:flatbuffers.ByteBuffer, obj?:Block):Block {
  return (obj || new Block()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBlock(bb:flatbuffers.ByteBuffer, obj?:Block):Block {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Block()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

blockType():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

featureFlags():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startBlock(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addBlockType(builder:flatbuffers.Builder, blockType:number) {
  builder.addFieldInt32(0, blockType, 0);
}

static addFeatureFlags(builder:flatbuffers.Builder, featureFlags:bigint) {
  builder.addFieldInt64(1, featureFlags, BigInt('0'));
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(2, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(3, y, 0.0);
}

static endBlock(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBlock(builder:flatbuffers.Builder, blockType:number, featureFlags:bigint, x:number, y:number):flatbuffers.Offset {
  Block.startBlock(builder);
  Block.addBlockType(builder, blockType);
  Block.addFeatureFlags(builder, featureFlags);
  Block.addX(builder, x);
  Block.addY(builder, y);
  return Block.endBlock(builder);
}
}
