table Vec2 {
	x: float32;
	y: float32;
}

table MissileSlot {
	is_loaded: bool;
	reload_timer: float32;
	x: float32;
	y: float32;
	rotation: float32;
}

table Shield {
	is_destroyed: bool;
	hitpoints: float32;
	radius: float32;
}

table Block {
	block_type: uint32;
	feature_flags: uint64;
	x: float32;
	y: float32;
	rotation: float32;
	hitpoints: float32;
	applied_thrust: float32;
	is_destroyed: bool;
	missile_slots: [MissileSlot];
	local_turret_rotation: float32; // Relative to entity
	shield: Shield;
}

table Explosion {
	x: float32;
	y: float32;
	radius: float32;
	damage: float32;
}

// Define the Entity table for game entities
table Entity {
	id: uint64;               // Unique identifier for the entity
	my: bool;                // Flag indicating if the entity is "my" entity
	is_commandable: bool;    // whether this entity is controllable by a program
	position: Vec2;          // Position of the entity
	linear_velocity: Vec2;   // Linear velocity of the entity
	owner: uint8;              // Owner of the entity
	rotation: float32;         // Rotation angle of the entity
	angular_velocity: float32; // Angular velocity of the entity
	blocks: [Block];
}

table Projectile {
	my: bool;
	position: Vec2;
	linear_velocity: Vec2;
	size: float32;
	damage: float32;
}

table Flag {
	owner_id: uint8;
	x: float32; //note, their initial x and y positions are also the base position where the enemy's flag needs to be taken to win
	y: float32;
	carrier_id: uint64; // the entity id that is carrying this flag
}

// Define the GameState table for the overall game state
table GameState {
	flags: [Flag];
	entities: [Entity]; // Array of entities in the game state. ships, debris, missiles, and obstacles
	projectiles: [Projectile];
	explosions: [Explosion];
	my_id: uint8; // the id of the script reading this state
	winner_id: uint8; // The id of the script that won the game. Do not consider this value until the very last snapshot of the gamestate.
}

root_type GameState;
