// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Block } from './block';
import { Vec2 } from './vec2';


export class Entity {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Entity {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEntity(bb:flatbuffers.ByteBuffer, obj?:Entity):Entity {
  return (obj || new Entity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEntity(bb:flatbuffers.ByteBuffer, obj?:Entity):Entity {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Entity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

my():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isCommandable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

position(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

linearVelocity(obj?:Vec2):Vec2|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Vec2()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

owner():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rotation():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

angularVelocity():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

blocks(index: number, obj?:Block):Block|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new Block()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

blocksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEntity(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, BigInt('0'));
}

static addMy(builder:flatbuffers.Builder, my:boolean) {
  builder.addFieldInt8(1, +my, +false);
}

static addIsCommandable(builder:flatbuffers.Builder, isCommandable:boolean) {
  builder.addFieldInt8(2, +isCommandable, +false);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, positionOffset, 0);
}

static addLinearVelocity(builder:flatbuffers.Builder, linearVelocityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, linearVelocityOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, owner:number) {
  builder.addFieldInt32(5, owner, 0);
}

static addRotation(builder:flatbuffers.Builder, rotation:number) {
  builder.addFieldFloat32(6, rotation, 0.0);
}

static addAngularVelocity(builder:flatbuffers.Builder, angularVelocity:number) {
  builder.addFieldFloat32(7, angularVelocity, 0.0);
}

static addBlocks(builder:flatbuffers.Builder, blocksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, blocksOffset, 0);
}

static createBlocksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlocksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEntity(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
