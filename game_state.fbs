struct Vec2 {
	x: float32;
	y: float32;
}

table MissileSlot {
	is_loaded: bool;
	reload_timer: float32;
	x: float32;
	y: float32;
	local_rotation: float32; // Relative to entity
}

table Shield {
	is_destroyed: bool;
	hitpoints: float32;
	radius: float32;
}

table Block {
	block_type: uint32;
	feature_flags: uint64;
	x: float32;
	y: float32;
	rotation: float32;
	hitpoints: float32;
	applied_thrust: float32;
	is_destroyed: bool;
	missile_slots: [MissileSlot];
	local_turret_rotation: float32; // Relative to entity
	shield: Shield;
}

table Explosion {
	x: float32;
	y: float32;
	radius: float32;
	damage: float32;
}

// Define the Entity table for game entities
table Entity {
	id: uint64;               // Unique identifier for the entity
	owner: uint8;              // Owner of the entity
	is_commandable: bool;    // whether this entity is controllable by a program
	position: Vec2;          // Position of the entity
	linear_velocity: Vec2;   // Linear velocity of the entity
	rotation: float32;         // Rotation angle of the entity
	angular_velocity: float32; // Angular velocity of the entity
	blocks: [Block];
}

table Projectile {
	id: uint64;
	owner: uint8;
    position: Vec2;
    linear_velocity: Vec2;
    damage: float32;
    size: float32;
	range: float32;
}

table DeadProjectile {
	id: uint64;	
	position: Vec2;
}

table Flag {
	owner_id: uint8; // if it is not GameState.my_id, it is the enemy flag
	x: float32; //note, their initial x and y positions are also the base position where the enemy's flag needs to be taken to win
	y: float32;
	is_carried: bool; // whether some entity is carrying this flag.
	carrier_id: uint64; // the entity id that is carrying this flag. ignore if is_carried is false
}

struct BlockHitUpdate {
	block_index: uint16;
	hitpoints: float32;
	is_destroyed: bool;
}

struct ThrusterUpdate {
	block_index: uint16;
	applied_thrust: float32;
}

struct ShieldUpdate {
	block_index: uint16;
	hitpoints: float32;
	is_destroyed: bool;
}

struct MissileSlotUpdate {
	block_index: uint16;
	slot_index: uint8;
	is_loaded: bool;
	local_rotation: float32; // relative to entity
}

struct TurretUpdate {
	block_index: uint16;	
	local_rotation: float32; // relative to entity
}

table EntityUpdate {
	id: uint64;
	position: Vec2;
	linear_velocity: Vec2;
	rotation: float32;
	is_commandable: bool; //if it was previously true and now false, then the entity was a ship that is now debris
	block_hit_updates: [BlockHitUpdate];
	thruster_updates: [ThrusterUpdate];
	shield_updates: [ShieldUpdate];
	missile_slot_updates: [MissileSlotUpdate];
	turret_updates: [TurretUpdate];
}

// updates to entities that are only a single block. intention is to reduce data transfer.
table SingleBlockEntityUpdate {
	id: uint64;	
	position: Vec2;
	linear_velocity: Vec2;
	rotation: float32;
	hitpoints: float32;
	turret_rotation: float32; // relative to entity
	applied_thrust: float32;
}


table GameStateDelta {
	flag_updates: [Flag];
	new_entities: [Entity];
	entity_updates: [EntityUpdate];
	single_block_entity_updates: [SingleBlockEntityUpdate];
	dead_entities: [uint64]; //stores the ids of the entities that were destroyed
	new_projectiles: [Projectile];
	dead_projectiles: [DeadProjectile];
	explosions: [Explosion];
	my_id: uint8;
	winner_id: uint8; // The owner id of the script that won the game. Do not consider this value until the very last snapshot of the gamestate. 0 means game tied
}

table Path {
	waypoints: [Vec2];
}

root_type GameStateDelta;
