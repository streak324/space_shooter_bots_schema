// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTATE_H_
#define FLATBUFFERS_GENERATED_GAMESTATE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Vec2;

struct MissileSlot;
struct MissileSlotBuilder;

struct Shield;
struct ShieldBuilder;

struct Block;
struct BlockBuilder;

struct Explosion;
struct ExplosionBuilder;

struct Entity;
struct EntityBuilder;

struct Projectile;
struct ProjectileBuilder;

struct DeadProjectile;
struct DeadProjectileBuilder;

struct Flag;
struct FlagBuilder;

struct BlockHitUpdate;

struct ThrusterUpdate;

struct ShieldUpdate;

struct MissileSlotUpdate;

struct TurretUpdate;

struct EntityUpdate;
struct EntityUpdateBuilder;

struct SingleBlockEntityUpdate;
struct SingleBlockEntityUpdateBuilder;

struct GameStateDelta;
struct GameStateDeltaBuilder;

struct Path;
struct PathBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2()
      : x_(0),
        y_(0) {
  }
  Vec2(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) BlockHitUpdate FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t block_index_;
  int16_t padding0__;
  float hitpoints_;
  uint8_t is_destroyed_;
  int8_t padding1__;  int16_t padding2__;

 public:
  BlockHitUpdate()
      : block_index_(0),
        padding0__(0),
        hitpoints_(0),
        is_destroyed_(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  BlockHitUpdate(uint16_t _block_index, float _hitpoints, bool _is_destroyed)
      : block_index_(::flatbuffers::EndianScalar(_block_index)),
        padding0__(0),
        hitpoints_(::flatbuffers::EndianScalar(_hitpoints)),
        is_destroyed_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_is_destroyed))),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  uint16_t block_index() const {
    return ::flatbuffers::EndianScalar(block_index_);
  }
  float hitpoints() const {
    return ::flatbuffers::EndianScalar(hitpoints_);
  }
  bool is_destroyed() const {
    return ::flatbuffers::EndianScalar(is_destroyed_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(BlockHitUpdate, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ThrusterUpdate FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t block_index_;
  int16_t padding0__;
  float applied_thrust_;

 public:
  ThrusterUpdate()
      : block_index_(0),
        padding0__(0),
        applied_thrust_(0) {
    (void)padding0__;
  }
  ThrusterUpdate(uint16_t _block_index, float _applied_thrust)
      : block_index_(::flatbuffers::EndianScalar(_block_index)),
        padding0__(0),
        applied_thrust_(::flatbuffers::EndianScalar(_applied_thrust)) {
    (void)padding0__;
  }
  uint16_t block_index() const {
    return ::flatbuffers::EndianScalar(block_index_);
  }
  float applied_thrust() const {
    return ::flatbuffers::EndianScalar(applied_thrust_);
  }
};
FLATBUFFERS_STRUCT_END(ThrusterUpdate, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) ShieldUpdate FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t block_index_;
  int16_t padding0__;
  float hitpoints_;
  uint8_t is_destroyed_;
  int8_t padding1__;  int16_t padding2__;

 public:
  ShieldUpdate()
      : block_index_(0),
        padding0__(0),
        hitpoints_(0),
        is_destroyed_(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  ShieldUpdate(uint16_t _block_index, float _hitpoints, bool _is_destroyed)
      : block_index_(::flatbuffers::EndianScalar(_block_index)),
        padding0__(0),
        hitpoints_(::flatbuffers::EndianScalar(_hitpoints)),
        is_destroyed_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_is_destroyed))),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  uint16_t block_index() const {
    return ::flatbuffers::EndianScalar(block_index_);
  }
  float hitpoints() const {
    return ::flatbuffers::EndianScalar(hitpoints_);
  }
  bool is_destroyed() const {
    return ::flatbuffers::EndianScalar(is_destroyed_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(ShieldUpdate, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) MissileSlotUpdate FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t block_index_;
  uint8_t slot_index_;
  uint8_t is_loaded_;
  float local_rotation_;

 public:
  MissileSlotUpdate()
      : block_index_(0),
        slot_index_(0),
        is_loaded_(0),
        local_rotation_(0) {
  }
  MissileSlotUpdate(uint16_t _block_index, uint8_t _slot_index, bool _is_loaded, float _local_rotation)
      : block_index_(::flatbuffers::EndianScalar(_block_index)),
        slot_index_(::flatbuffers::EndianScalar(_slot_index)),
        is_loaded_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_is_loaded))),
        local_rotation_(::flatbuffers::EndianScalar(_local_rotation)) {
  }
  uint16_t block_index() const {
    return ::flatbuffers::EndianScalar(block_index_);
  }
  uint8_t slot_index() const {
    return ::flatbuffers::EndianScalar(slot_index_);
  }
  bool is_loaded() const {
    return ::flatbuffers::EndianScalar(is_loaded_) != 0;
  }
  float local_rotation() const {
    return ::flatbuffers::EndianScalar(local_rotation_);
  }
};
FLATBUFFERS_STRUCT_END(MissileSlotUpdate, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) TurretUpdate FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t block_index_;
  int16_t padding0__;
  float local_rotation_;

 public:
  TurretUpdate()
      : block_index_(0),
        padding0__(0),
        local_rotation_(0) {
    (void)padding0__;
  }
  TurretUpdate(uint16_t _block_index, float _local_rotation)
      : block_index_(::flatbuffers::EndianScalar(_block_index)),
        padding0__(0),
        local_rotation_(::flatbuffers::EndianScalar(_local_rotation)) {
    (void)padding0__;
  }
  uint16_t block_index() const {
    return ::flatbuffers::EndianScalar(block_index_);
  }
  float local_rotation() const {
    return ::flatbuffers::EndianScalar(local_rotation_);
  }
};
FLATBUFFERS_STRUCT_END(TurretUpdate, 8);

struct MissileSlot FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MissileSlotBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IS_LOADED = 4,
    VT_RELOAD_TIMER = 6,
    VT_X = 8,
    VT_Y = 10,
    VT_LOCAL_ROTATION = 12
  };
  bool is_loaded() const {
    return GetField<uint8_t>(VT_IS_LOADED, 0) != 0;
  }
  float reload_timer() const {
    return GetField<float>(VT_RELOAD_TIMER, 0.0f);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float local_rotation() const {
    return GetField<float>(VT_LOCAL_ROTATION, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_IS_LOADED, 1) &&
           VerifyField<float>(verifier, VT_RELOAD_TIMER, 4) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_LOCAL_ROTATION, 4) &&
           verifier.EndTable();
  }
};

struct MissileSlotBuilder {
  typedef MissileSlot Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_is_loaded(bool is_loaded) {
    fbb_.AddElement<uint8_t>(MissileSlot::VT_IS_LOADED, static_cast<uint8_t>(is_loaded), 0);
  }
  void add_reload_timer(float reload_timer) {
    fbb_.AddElement<float>(MissileSlot::VT_RELOAD_TIMER, reload_timer, 0.0f);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(MissileSlot::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(MissileSlot::VT_Y, y, 0.0f);
  }
  void add_local_rotation(float local_rotation) {
    fbb_.AddElement<float>(MissileSlot::VT_LOCAL_ROTATION, local_rotation, 0.0f);
  }
  explicit MissileSlotBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MissileSlot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MissileSlot>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MissileSlot> CreateMissileSlot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool is_loaded = false,
    float reload_timer = 0.0f,
    float x = 0.0f,
    float y = 0.0f,
    float local_rotation = 0.0f) {
  MissileSlotBuilder builder_(_fbb);
  builder_.add_local_rotation(local_rotation);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_reload_timer(reload_timer);
  builder_.add_is_loaded(is_loaded);
  return builder_.Finish();
}

struct Shield FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ShieldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IS_DESTROYED = 4,
    VT_HITPOINTS = 6,
    VT_RADIUS = 8
  };
  bool is_destroyed() const {
    return GetField<uint8_t>(VT_IS_DESTROYED, 0) != 0;
  }
  float hitpoints() const {
    return GetField<float>(VT_HITPOINTS, 0.0f);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_IS_DESTROYED, 1) &&
           VerifyField<float>(verifier, VT_HITPOINTS, 4) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           verifier.EndTable();
  }
};

struct ShieldBuilder {
  typedef Shield Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_is_destroyed(bool is_destroyed) {
    fbb_.AddElement<uint8_t>(Shield::VT_IS_DESTROYED, static_cast<uint8_t>(is_destroyed), 0);
  }
  void add_hitpoints(float hitpoints) {
    fbb_.AddElement<float>(Shield::VT_HITPOINTS, hitpoints, 0.0f);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(Shield::VT_RADIUS, radius, 0.0f);
  }
  explicit ShieldBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Shield> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Shield>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Shield> CreateShield(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool is_destroyed = false,
    float hitpoints = 0.0f,
    float radius = 0.0f) {
  ShieldBuilder builder_(_fbb);
  builder_.add_radius(radius);
  builder_.add_hitpoints(hitpoints);
  builder_.add_is_destroyed(is_destroyed);
  return builder_.Finish();
}

struct Block FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BlockBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLOCK_TYPE = 4,
    VT_FEATURE_FLAGS = 6,
    VT_X = 8,
    VT_Y = 10,
    VT_ROTATION = 12,
    VT_HITPOINTS = 14,
    VT_APPLIED_THRUST = 16,
    VT_IS_DESTROYED = 18,
    VT_MISSILE_SLOTS = 20,
    VT_LOCAL_TURRET_ROTATION = 22,
    VT_SHIELD = 24
  };
  uint32_t block_type() const {
    return GetField<uint32_t>(VT_BLOCK_TYPE, 0);
  }
  uint64_t feature_flags() const {
    return GetField<uint64_t>(VT_FEATURE_FLAGS, 0);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  float hitpoints() const {
    return GetField<float>(VT_HITPOINTS, 0.0f);
  }
  float applied_thrust() const {
    return GetField<float>(VT_APPLIED_THRUST, 0.0f);
  }
  bool is_destroyed() const {
    return GetField<uint8_t>(VT_IS_DESTROYED, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<MissileSlot>> *missile_slots() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MissileSlot>> *>(VT_MISSILE_SLOTS);
  }
  float local_turret_rotation() const {
    return GetField<float>(VT_LOCAL_TURRET_ROTATION, 0.0f);
  }
  const Shield *shield() const {
    return GetPointer<const Shield *>(VT_SHIELD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_BLOCK_TYPE, 4) &&
           VerifyField<uint64_t>(verifier, VT_FEATURE_FLAGS, 8) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<float>(verifier, VT_HITPOINTS, 4) &&
           VerifyField<float>(verifier, VT_APPLIED_THRUST, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_DESTROYED, 1) &&
           VerifyOffset(verifier, VT_MISSILE_SLOTS) &&
           verifier.VerifyVector(missile_slots()) &&
           verifier.VerifyVectorOfTables(missile_slots()) &&
           VerifyField<float>(verifier, VT_LOCAL_TURRET_ROTATION, 4) &&
           VerifyOffset(verifier, VT_SHIELD) &&
           verifier.VerifyTable(shield()) &&
           verifier.EndTable();
  }
};

struct BlockBuilder {
  typedef Block Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_block_type(uint32_t block_type) {
    fbb_.AddElement<uint32_t>(Block::VT_BLOCK_TYPE, block_type, 0);
  }
  void add_feature_flags(uint64_t feature_flags) {
    fbb_.AddElement<uint64_t>(Block::VT_FEATURE_FLAGS, feature_flags, 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(Block::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Block::VT_Y, y, 0.0f);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(Block::VT_ROTATION, rotation, 0.0f);
  }
  void add_hitpoints(float hitpoints) {
    fbb_.AddElement<float>(Block::VT_HITPOINTS, hitpoints, 0.0f);
  }
  void add_applied_thrust(float applied_thrust) {
    fbb_.AddElement<float>(Block::VT_APPLIED_THRUST, applied_thrust, 0.0f);
  }
  void add_is_destroyed(bool is_destroyed) {
    fbb_.AddElement<uint8_t>(Block::VT_IS_DESTROYED, static_cast<uint8_t>(is_destroyed), 0);
  }
  void add_missile_slots(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MissileSlot>>> missile_slots) {
    fbb_.AddOffset(Block::VT_MISSILE_SLOTS, missile_slots);
  }
  void add_local_turret_rotation(float local_turret_rotation) {
    fbb_.AddElement<float>(Block::VT_LOCAL_TURRET_ROTATION, local_turret_rotation, 0.0f);
  }
  void add_shield(::flatbuffers::Offset<Shield> shield) {
    fbb_.AddOffset(Block::VT_SHIELD, shield);
  }
  explicit BlockBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Block> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Block>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Block> CreateBlock(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t block_type = 0,
    uint64_t feature_flags = 0,
    float x = 0.0f,
    float y = 0.0f,
    float rotation = 0.0f,
    float hitpoints = 0.0f,
    float applied_thrust = 0.0f,
    bool is_destroyed = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MissileSlot>>> missile_slots = 0,
    float local_turret_rotation = 0.0f,
    ::flatbuffers::Offset<Shield> shield = 0) {
  BlockBuilder builder_(_fbb);
  builder_.add_feature_flags(feature_flags);
  builder_.add_shield(shield);
  builder_.add_local_turret_rotation(local_turret_rotation);
  builder_.add_missile_slots(missile_slots);
  builder_.add_applied_thrust(applied_thrust);
  builder_.add_hitpoints(hitpoints);
  builder_.add_rotation(rotation);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_block_type(block_type);
  builder_.add_is_destroyed(is_destroyed);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Block> CreateBlockDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t block_type = 0,
    uint64_t feature_flags = 0,
    float x = 0.0f,
    float y = 0.0f,
    float rotation = 0.0f,
    float hitpoints = 0.0f,
    float applied_thrust = 0.0f,
    bool is_destroyed = false,
    const std::vector<::flatbuffers::Offset<MissileSlot>> *missile_slots = nullptr,
    float local_turret_rotation = 0.0f,
    ::flatbuffers::Offset<Shield> shield = 0) {
  auto missile_slots__ = missile_slots ? _fbb.CreateVector<::flatbuffers::Offset<MissileSlot>>(*missile_slots) : 0;
  return CreateBlock(
      _fbb,
      block_type,
      feature_flags,
      x,
      y,
      rotation,
      hitpoints,
      applied_thrust,
      is_destroyed,
      missile_slots__,
      local_turret_rotation,
      shield);
}

struct Explosion FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ExplosionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_RADIUS = 8,
    VT_DAMAGE = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  float damage() const {
    return GetField<float>(VT_DAMAGE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           VerifyField<float>(verifier, VT_DAMAGE, 4) &&
           verifier.EndTable();
  }
};

struct ExplosionBuilder {
  typedef Explosion Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Explosion::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Explosion::VT_Y, y, 0.0f);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(Explosion::VT_RADIUS, radius, 0.0f);
  }
  void add_damage(float damage) {
    fbb_.AddElement<float>(Explosion::VT_DAMAGE, damage, 0.0f);
  }
  explicit ExplosionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Explosion> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Explosion>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Explosion> CreateExplosion(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float radius = 0.0f,
    float damage = 0.0f) {
  ExplosionBuilder builder_(_fbb);
  builder_.add_damage(damage);
  builder_.add_radius(radius);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_OWNER = 6,
    VT_IS_COMMANDABLE = 8,
    VT_POSITION = 10,
    VT_LINEAR_VELOCITY = 12,
    VT_ROTATION = 14,
    VT_ANGULAR_VELOCITY = 16,
    VT_BLOCKS = 18
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint8_t owner() const {
    return GetField<uint8_t>(VT_OWNER, 0);
  }
  bool is_commandable() const {
    return GetField<uint8_t>(VT_IS_COMMANDABLE, 0) != 0;
  }
  const Vec2 *position() const {
    return GetStruct<const Vec2 *>(VT_POSITION);
  }
  const Vec2 *linear_velocity() const {
    return GetStruct<const Vec2 *>(VT_LINEAR_VELOCITY);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  float angular_velocity() const {
    return GetField<float>(VT_ANGULAR_VELOCITY, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Block>> *blocks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Block>> *>(VT_BLOCKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_OWNER, 1) &&
           VerifyField<uint8_t>(verifier, VT_IS_COMMANDABLE, 1) &&
           VerifyField<Vec2>(verifier, VT_POSITION, 4) &&
           VerifyField<Vec2>(verifier, VT_LINEAR_VELOCITY, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<float>(verifier, VT_ANGULAR_VELOCITY, 4) &&
           VerifyOffset(verifier, VT_BLOCKS) &&
           verifier.VerifyVector(blocks()) &&
           verifier.VerifyVectorOfTables(blocks()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Entity::VT_ID, id, 0);
  }
  void add_owner(uint8_t owner) {
    fbb_.AddElement<uint8_t>(Entity::VT_OWNER, owner, 0);
  }
  void add_is_commandable(bool is_commandable) {
    fbb_.AddElement<uint8_t>(Entity::VT_IS_COMMANDABLE, static_cast<uint8_t>(is_commandable), 0);
  }
  void add_position(const Vec2 *position) {
    fbb_.AddStruct(Entity::VT_POSITION, position);
  }
  void add_linear_velocity(const Vec2 *linear_velocity) {
    fbb_.AddStruct(Entity::VT_LINEAR_VELOCITY, linear_velocity);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(Entity::VT_ROTATION, rotation, 0.0f);
  }
  void add_angular_velocity(float angular_velocity) {
    fbb_.AddElement<float>(Entity::VT_ANGULAR_VELOCITY, angular_velocity, 0.0f);
  }
  void add_blocks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Block>>> blocks) {
    fbb_.AddOffset(Entity::VT_BLOCKS, blocks);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint8_t owner = 0,
    bool is_commandable = false,
    const Vec2 *position = nullptr,
    const Vec2 *linear_velocity = nullptr,
    float rotation = 0.0f,
    float angular_velocity = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Block>>> blocks = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_blocks(blocks);
  builder_.add_angular_velocity(angular_velocity);
  builder_.add_rotation(rotation);
  builder_.add_linear_velocity(linear_velocity);
  builder_.add_position(position);
  builder_.add_is_commandable(is_commandable);
  builder_.add_owner(owner);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint8_t owner = 0,
    bool is_commandable = false,
    const Vec2 *position = nullptr,
    const Vec2 *linear_velocity = nullptr,
    float rotation = 0.0f,
    float angular_velocity = 0.0f,
    const std::vector<::flatbuffers::Offset<Block>> *blocks = nullptr) {
  auto blocks__ = blocks ? _fbb.CreateVector<::flatbuffers::Offset<Block>>(*blocks) : 0;
  return CreateEntity(
      _fbb,
      id,
      owner,
      is_commandable,
      position,
      linear_velocity,
      rotation,
      angular_velocity,
      blocks__);
}

struct Projectile FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProjectileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_OWNER = 6,
    VT_POSITION = 8,
    VT_LINEAR_VELOCITY = 10,
    VT_DAMAGE = 12,
    VT_SIZE = 14,
    VT_RANGE = 16
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint8_t owner() const {
    return GetField<uint8_t>(VT_OWNER, 0);
  }
  const Vec2 *position() const {
    return GetStruct<const Vec2 *>(VT_POSITION);
  }
  const Vec2 *linear_velocity() const {
    return GetStruct<const Vec2 *>(VT_LINEAR_VELOCITY);
  }
  float damage() const {
    return GetField<float>(VT_DAMAGE, 0.0f);
  }
  float size() const {
    return GetField<float>(VT_SIZE, 0.0f);
  }
  float range() const {
    return GetField<float>(VT_RANGE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_OWNER, 1) &&
           VerifyField<Vec2>(verifier, VT_POSITION, 4) &&
           VerifyField<Vec2>(verifier, VT_LINEAR_VELOCITY, 4) &&
           VerifyField<float>(verifier, VT_DAMAGE, 4) &&
           VerifyField<float>(verifier, VT_SIZE, 4) &&
           VerifyField<float>(verifier, VT_RANGE, 4) &&
           verifier.EndTable();
  }
};

struct ProjectileBuilder {
  typedef Projectile Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Projectile::VT_ID, id, 0);
  }
  void add_owner(uint8_t owner) {
    fbb_.AddElement<uint8_t>(Projectile::VT_OWNER, owner, 0);
  }
  void add_position(const Vec2 *position) {
    fbb_.AddStruct(Projectile::VT_POSITION, position);
  }
  void add_linear_velocity(const Vec2 *linear_velocity) {
    fbb_.AddStruct(Projectile::VT_LINEAR_VELOCITY, linear_velocity);
  }
  void add_damage(float damage) {
    fbb_.AddElement<float>(Projectile::VT_DAMAGE, damage, 0.0f);
  }
  void add_size(float size) {
    fbb_.AddElement<float>(Projectile::VT_SIZE, size, 0.0f);
  }
  void add_range(float range) {
    fbb_.AddElement<float>(Projectile::VT_RANGE, range, 0.0f);
  }
  explicit ProjectileBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Projectile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Projectile>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Projectile> CreateProjectile(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint8_t owner = 0,
    const Vec2 *position = nullptr,
    const Vec2 *linear_velocity = nullptr,
    float damage = 0.0f,
    float size = 0.0f,
    float range = 0.0f) {
  ProjectileBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_range(range);
  builder_.add_size(size);
  builder_.add_damage(damage);
  builder_.add_linear_velocity(linear_velocity);
  builder_.add_position(position);
  builder_.add_owner(owner);
  return builder_.Finish();
}

struct DeadProjectile FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeadProjectileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POSITION = 6
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Vec2 *position() const {
    return GetStruct<const Vec2 *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<Vec2>(verifier, VT_POSITION, 4) &&
           verifier.EndTable();
  }
};

struct DeadProjectileBuilder {
  typedef DeadProjectile Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(DeadProjectile::VT_ID, id, 0);
  }
  void add_position(const Vec2 *position) {
    fbb_.AddStruct(DeadProjectile::VT_POSITION, position);
  }
  explicit DeadProjectileBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeadProjectile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeadProjectile>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeadProjectile> CreateDeadProjectile(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const Vec2 *position = nullptr) {
  DeadProjectileBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_position(position);
  return builder_.Finish();
}

struct Flag FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlagBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OWNER_ID = 4,
    VT_X = 6,
    VT_Y = 8,
    VT_IS_CARRIED = 10,
    VT_CARRIER_ID = 12
  };
  uint8_t owner_id() const {
    return GetField<uint8_t>(VT_OWNER_ID, 0);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool is_carried() const {
    return GetField<uint8_t>(VT_IS_CARRIED, 0) != 0;
  }
  uint64_t carrier_id() const {
    return GetField<uint64_t>(VT_CARRIER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OWNER_ID, 1) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_CARRIED, 1) &&
           VerifyField<uint64_t>(verifier, VT_CARRIER_ID, 8) &&
           verifier.EndTable();
  }
};

struct FlagBuilder {
  typedef Flag Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_owner_id(uint8_t owner_id) {
    fbb_.AddElement<uint8_t>(Flag::VT_OWNER_ID, owner_id, 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(Flag::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Flag::VT_Y, y, 0.0f);
  }
  void add_is_carried(bool is_carried) {
    fbb_.AddElement<uint8_t>(Flag::VT_IS_CARRIED, static_cast<uint8_t>(is_carried), 0);
  }
  void add_carrier_id(uint64_t carrier_id) {
    fbb_.AddElement<uint64_t>(Flag::VT_CARRIER_ID, carrier_id, 0);
  }
  explicit FlagBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Flag> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Flag>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Flag> CreateFlag(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t owner_id = 0,
    float x = 0.0f,
    float y = 0.0f,
    bool is_carried = false,
    uint64_t carrier_id = 0) {
  FlagBuilder builder_(_fbb);
  builder_.add_carrier_id(carrier_id);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_is_carried(is_carried);
  builder_.add_owner_id(owner_id);
  return builder_.Finish();
}

struct EntityUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POSITION = 6,
    VT_LINEAR_VELOCITY = 8,
    VT_ROTATION = 10,
    VT_IS_COMMANDABLE = 12,
    VT_BLOCK_HIT_UPDATES = 14,
    VT_THRUSTER_UPDATES = 16,
    VT_SHIELD_UPDATES = 18,
    VT_MISSILE_SLOT_UPDATES = 20,
    VT_TURRET_UPDATES = 22
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Vec2 *position() const {
    return GetStruct<const Vec2 *>(VT_POSITION);
  }
  const Vec2 *linear_velocity() const {
    return GetStruct<const Vec2 *>(VT_LINEAR_VELOCITY);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool is_commandable() const {
    return GetField<uint8_t>(VT_IS_COMMANDABLE, 0) != 0;
  }
  const ::flatbuffers::Vector<const BlockHitUpdate *> *block_hit_updates() const {
    return GetPointer<const ::flatbuffers::Vector<const BlockHitUpdate *> *>(VT_BLOCK_HIT_UPDATES);
  }
  const ::flatbuffers::Vector<const ThrusterUpdate *> *thruster_updates() const {
    return GetPointer<const ::flatbuffers::Vector<const ThrusterUpdate *> *>(VT_THRUSTER_UPDATES);
  }
  const ::flatbuffers::Vector<const ShieldUpdate *> *shield_updates() const {
    return GetPointer<const ::flatbuffers::Vector<const ShieldUpdate *> *>(VT_SHIELD_UPDATES);
  }
  const ::flatbuffers::Vector<const MissileSlotUpdate *> *missile_slot_updates() const {
    return GetPointer<const ::flatbuffers::Vector<const MissileSlotUpdate *> *>(VT_MISSILE_SLOT_UPDATES);
  }
  const ::flatbuffers::Vector<const TurretUpdate *> *turret_updates() const {
    return GetPointer<const ::flatbuffers::Vector<const TurretUpdate *> *>(VT_TURRET_UPDATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<Vec2>(verifier, VT_POSITION, 4) &&
           VerifyField<Vec2>(verifier, VT_LINEAR_VELOCITY, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_COMMANDABLE, 1) &&
           VerifyOffset(verifier, VT_BLOCK_HIT_UPDATES) &&
           verifier.VerifyVector(block_hit_updates()) &&
           VerifyOffset(verifier, VT_THRUSTER_UPDATES) &&
           verifier.VerifyVector(thruster_updates()) &&
           VerifyOffset(verifier, VT_SHIELD_UPDATES) &&
           verifier.VerifyVector(shield_updates()) &&
           VerifyOffset(verifier, VT_MISSILE_SLOT_UPDATES) &&
           verifier.VerifyVector(missile_slot_updates()) &&
           VerifyOffset(verifier, VT_TURRET_UPDATES) &&
           verifier.VerifyVector(turret_updates()) &&
           verifier.EndTable();
  }
};

struct EntityUpdateBuilder {
  typedef EntityUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(EntityUpdate::VT_ID, id, 0);
  }
  void add_position(const Vec2 *position) {
    fbb_.AddStruct(EntityUpdate::VT_POSITION, position);
  }
  void add_linear_velocity(const Vec2 *linear_velocity) {
    fbb_.AddStruct(EntityUpdate::VT_LINEAR_VELOCITY, linear_velocity);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(EntityUpdate::VT_ROTATION, rotation, 0.0f);
  }
  void add_is_commandable(bool is_commandable) {
    fbb_.AddElement<uint8_t>(EntityUpdate::VT_IS_COMMANDABLE, static_cast<uint8_t>(is_commandable), 0);
  }
  void add_block_hit_updates(::flatbuffers::Offset<::flatbuffers::Vector<const BlockHitUpdate *>> block_hit_updates) {
    fbb_.AddOffset(EntityUpdate::VT_BLOCK_HIT_UPDATES, block_hit_updates);
  }
  void add_thruster_updates(::flatbuffers::Offset<::flatbuffers::Vector<const ThrusterUpdate *>> thruster_updates) {
    fbb_.AddOffset(EntityUpdate::VT_THRUSTER_UPDATES, thruster_updates);
  }
  void add_shield_updates(::flatbuffers::Offset<::flatbuffers::Vector<const ShieldUpdate *>> shield_updates) {
    fbb_.AddOffset(EntityUpdate::VT_SHIELD_UPDATES, shield_updates);
  }
  void add_missile_slot_updates(::flatbuffers::Offset<::flatbuffers::Vector<const MissileSlotUpdate *>> missile_slot_updates) {
    fbb_.AddOffset(EntityUpdate::VT_MISSILE_SLOT_UPDATES, missile_slot_updates);
  }
  void add_turret_updates(::flatbuffers::Offset<::flatbuffers::Vector<const TurretUpdate *>> turret_updates) {
    fbb_.AddOffset(EntityUpdate::VT_TURRET_UPDATES, turret_updates);
  }
  explicit EntityUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EntityUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EntityUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EntityUpdate> CreateEntityUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const Vec2 *position = nullptr,
    const Vec2 *linear_velocity = nullptr,
    float rotation = 0.0f,
    bool is_commandable = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<const BlockHitUpdate *>> block_hit_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const ThrusterUpdate *>> thruster_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const ShieldUpdate *>> shield_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const MissileSlotUpdate *>> missile_slot_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const TurretUpdate *>> turret_updates = 0) {
  EntityUpdateBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_turret_updates(turret_updates);
  builder_.add_missile_slot_updates(missile_slot_updates);
  builder_.add_shield_updates(shield_updates);
  builder_.add_thruster_updates(thruster_updates);
  builder_.add_block_hit_updates(block_hit_updates);
  builder_.add_rotation(rotation);
  builder_.add_linear_velocity(linear_velocity);
  builder_.add_position(position);
  builder_.add_is_commandable(is_commandable);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EntityUpdate> CreateEntityUpdateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const Vec2 *position = nullptr,
    const Vec2 *linear_velocity = nullptr,
    float rotation = 0.0f,
    bool is_commandable = false,
    const std::vector<BlockHitUpdate> *block_hit_updates = nullptr,
    const std::vector<ThrusterUpdate> *thruster_updates = nullptr,
    const std::vector<ShieldUpdate> *shield_updates = nullptr,
    const std::vector<MissileSlotUpdate> *missile_slot_updates = nullptr,
    const std::vector<TurretUpdate> *turret_updates = nullptr) {
  auto block_hit_updates__ = block_hit_updates ? _fbb.CreateVectorOfStructs<BlockHitUpdate>(*block_hit_updates) : 0;
  auto thruster_updates__ = thruster_updates ? _fbb.CreateVectorOfStructs<ThrusterUpdate>(*thruster_updates) : 0;
  auto shield_updates__ = shield_updates ? _fbb.CreateVectorOfStructs<ShieldUpdate>(*shield_updates) : 0;
  auto missile_slot_updates__ = missile_slot_updates ? _fbb.CreateVectorOfStructs<MissileSlotUpdate>(*missile_slot_updates) : 0;
  auto turret_updates__ = turret_updates ? _fbb.CreateVectorOfStructs<TurretUpdate>(*turret_updates) : 0;
  return CreateEntityUpdate(
      _fbb,
      id,
      position,
      linear_velocity,
      rotation,
      is_commandable,
      block_hit_updates__,
      thruster_updates__,
      shield_updates__,
      missile_slot_updates__,
      turret_updates__);
}

struct SingleBlockEntityUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SingleBlockEntityUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POSITION = 6,
    VT_LINEAR_VELOCITY = 8,
    VT_ROTATION = 10,
    VT_HITPOINTS = 12,
    VT_TURRET_ROTATION = 14,
    VT_APPLIED_THRUST = 16
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Vec2 *position() const {
    return GetStruct<const Vec2 *>(VT_POSITION);
  }
  const Vec2 *linear_velocity() const {
    return GetStruct<const Vec2 *>(VT_LINEAR_VELOCITY);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  float hitpoints() const {
    return GetField<float>(VT_HITPOINTS, 0.0f);
  }
  float turret_rotation() const {
    return GetField<float>(VT_TURRET_ROTATION, 0.0f);
  }
  float applied_thrust() const {
    return GetField<float>(VT_APPLIED_THRUST, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<Vec2>(verifier, VT_POSITION, 4) &&
           VerifyField<Vec2>(verifier, VT_LINEAR_VELOCITY, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<float>(verifier, VT_HITPOINTS, 4) &&
           VerifyField<float>(verifier, VT_TURRET_ROTATION, 4) &&
           VerifyField<float>(verifier, VT_APPLIED_THRUST, 4) &&
           verifier.EndTable();
  }
};

struct SingleBlockEntityUpdateBuilder {
  typedef SingleBlockEntityUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(SingleBlockEntityUpdate::VT_ID, id, 0);
  }
  void add_position(const Vec2 *position) {
    fbb_.AddStruct(SingleBlockEntityUpdate::VT_POSITION, position);
  }
  void add_linear_velocity(const Vec2 *linear_velocity) {
    fbb_.AddStruct(SingleBlockEntityUpdate::VT_LINEAR_VELOCITY, linear_velocity);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(SingleBlockEntityUpdate::VT_ROTATION, rotation, 0.0f);
  }
  void add_hitpoints(float hitpoints) {
    fbb_.AddElement<float>(SingleBlockEntityUpdate::VT_HITPOINTS, hitpoints, 0.0f);
  }
  void add_turret_rotation(float turret_rotation) {
    fbb_.AddElement<float>(SingleBlockEntityUpdate::VT_TURRET_ROTATION, turret_rotation, 0.0f);
  }
  void add_applied_thrust(float applied_thrust) {
    fbb_.AddElement<float>(SingleBlockEntityUpdate::VT_APPLIED_THRUST, applied_thrust, 0.0f);
  }
  explicit SingleBlockEntityUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SingleBlockEntityUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SingleBlockEntityUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SingleBlockEntityUpdate> CreateSingleBlockEntityUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const Vec2 *position = nullptr,
    const Vec2 *linear_velocity = nullptr,
    float rotation = 0.0f,
    float hitpoints = 0.0f,
    float turret_rotation = 0.0f,
    float applied_thrust = 0.0f) {
  SingleBlockEntityUpdateBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_applied_thrust(applied_thrust);
  builder_.add_turret_rotation(turret_rotation);
  builder_.add_hitpoints(hitpoints);
  builder_.add_rotation(rotation);
  builder_.add_linear_velocity(linear_velocity);
  builder_.add_position(position);
  return builder_.Finish();
}

struct GameStateDelta FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameStateDeltaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FLAG_UPDATES = 4,
    VT_NEW_ENTITIES = 6,
    VT_ENTITY_UPDATES = 8,
    VT_SINGLE_BLOCK_ENTITY_UPDATES = 10,
    VT_DEAD_ENTITIES = 12,
    VT_NEW_PROJECTILES = 14,
    VT_DEAD_PROJECTILES = 16,
    VT_EXPLOSIONS = 18,
    VT_MY_ID = 20,
    VT_WINNER_ID = 22
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Flag>> *flag_updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Flag>> *>(VT_FLAG_UPDATES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Entity>> *new_entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Entity>> *>(VT_NEW_ENTITIES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>> *entity_updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>> *>(VT_ENTITY_UPDATES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<SingleBlockEntityUpdate>> *single_block_entity_updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SingleBlockEntityUpdate>> *>(VT_SINGLE_BLOCK_ENTITY_UPDATES);
  }
  const ::flatbuffers::Vector<uint64_t> *dead_entities() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_DEAD_ENTITIES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Projectile>> *new_projectiles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Projectile>> *>(VT_NEW_PROJECTILES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>> *dead_projectiles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>> *>(VT_DEAD_PROJECTILES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Explosion>> *explosions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Explosion>> *>(VT_EXPLOSIONS);
  }
  uint8_t my_id() const {
    return GetField<uint8_t>(VT_MY_ID, 0);
  }
  uint8_t winner_id() const {
    return GetField<uint8_t>(VT_WINNER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FLAG_UPDATES) &&
           verifier.VerifyVector(flag_updates()) &&
           verifier.VerifyVectorOfTables(flag_updates()) &&
           VerifyOffset(verifier, VT_NEW_ENTITIES) &&
           verifier.VerifyVector(new_entities()) &&
           verifier.VerifyVectorOfTables(new_entities()) &&
           VerifyOffset(verifier, VT_ENTITY_UPDATES) &&
           verifier.VerifyVector(entity_updates()) &&
           verifier.VerifyVectorOfTables(entity_updates()) &&
           VerifyOffset(verifier, VT_SINGLE_BLOCK_ENTITY_UPDATES) &&
           verifier.VerifyVector(single_block_entity_updates()) &&
           verifier.VerifyVectorOfTables(single_block_entity_updates()) &&
           VerifyOffset(verifier, VT_DEAD_ENTITIES) &&
           verifier.VerifyVector(dead_entities()) &&
           VerifyOffset(verifier, VT_NEW_PROJECTILES) &&
           verifier.VerifyVector(new_projectiles()) &&
           verifier.VerifyVectorOfTables(new_projectiles()) &&
           VerifyOffset(verifier, VT_DEAD_PROJECTILES) &&
           verifier.VerifyVector(dead_projectiles()) &&
           verifier.VerifyVectorOfTables(dead_projectiles()) &&
           VerifyOffset(verifier, VT_EXPLOSIONS) &&
           verifier.VerifyVector(explosions()) &&
           verifier.VerifyVectorOfTables(explosions()) &&
           VerifyField<uint8_t>(verifier, VT_MY_ID, 1) &&
           VerifyField<uint8_t>(verifier, VT_WINNER_ID, 1) &&
           verifier.EndTable();
  }
};

struct GameStateDeltaBuilder {
  typedef GameStateDelta Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_flag_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Flag>>> flag_updates) {
    fbb_.AddOffset(GameStateDelta::VT_FLAG_UPDATES, flag_updates);
  }
  void add_new_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Entity>>> new_entities) {
    fbb_.AddOffset(GameStateDelta::VT_NEW_ENTITIES, new_entities);
  }
  void add_entity_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>>> entity_updates) {
    fbb_.AddOffset(GameStateDelta::VT_ENTITY_UPDATES, entity_updates);
  }
  void add_single_block_entity_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SingleBlockEntityUpdate>>> single_block_entity_updates) {
    fbb_.AddOffset(GameStateDelta::VT_SINGLE_BLOCK_ENTITY_UPDATES, single_block_entity_updates);
  }
  void add_dead_entities(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> dead_entities) {
    fbb_.AddOffset(GameStateDelta::VT_DEAD_ENTITIES, dead_entities);
  }
  void add_new_projectiles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Projectile>>> new_projectiles) {
    fbb_.AddOffset(GameStateDelta::VT_NEW_PROJECTILES, new_projectiles);
  }
  void add_dead_projectiles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>>> dead_projectiles) {
    fbb_.AddOffset(GameStateDelta::VT_DEAD_PROJECTILES, dead_projectiles);
  }
  void add_explosions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Explosion>>> explosions) {
    fbb_.AddOffset(GameStateDelta::VT_EXPLOSIONS, explosions);
  }
  void add_my_id(uint8_t my_id) {
    fbb_.AddElement<uint8_t>(GameStateDelta::VT_MY_ID, my_id, 0);
  }
  void add_winner_id(uint8_t winner_id) {
    fbb_.AddElement<uint8_t>(GameStateDelta::VT_WINNER_ID, winner_id, 0);
  }
  explicit GameStateDeltaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameStateDelta> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameStateDelta>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameStateDelta> CreateGameStateDelta(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Flag>>> flag_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Entity>>> new_entities = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<EntityUpdate>>> entity_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SingleBlockEntityUpdate>>> single_block_entity_updates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> dead_entities = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Projectile>>> new_projectiles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DeadProjectile>>> dead_projectiles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Explosion>>> explosions = 0,
    uint8_t my_id = 0,
    uint8_t winner_id = 0) {
  GameStateDeltaBuilder builder_(_fbb);
  builder_.add_explosions(explosions);
  builder_.add_dead_projectiles(dead_projectiles);
  builder_.add_new_projectiles(new_projectiles);
  builder_.add_dead_entities(dead_entities);
  builder_.add_single_block_entity_updates(single_block_entity_updates);
  builder_.add_entity_updates(entity_updates);
  builder_.add_new_entities(new_entities);
  builder_.add_flag_updates(flag_updates);
  builder_.add_winner_id(winner_id);
  builder_.add_my_id(my_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameStateDelta> CreateGameStateDeltaDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Flag>> *flag_updates = nullptr,
    const std::vector<::flatbuffers::Offset<Entity>> *new_entities = nullptr,
    const std::vector<::flatbuffers::Offset<EntityUpdate>> *entity_updates = nullptr,
    const std::vector<::flatbuffers::Offset<SingleBlockEntityUpdate>> *single_block_entity_updates = nullptr,
    const std::vector<uint64_t> *dead_entities = nullptr,
    const std::vector<::flatbuffers::Offset<Projectile>> *new_projectiles = nullptr,
    const std::vector<::flatbuffers::Offset<DeadProjectile>> *dead_projectiles = nullptr,
    const std::vector<::flatbuffers::Offset<Explosion>> *explosions = nullptr,
    uint8_t my_id = 0,
    uint8_t winner_id = 0) {
  auto flag_updates__ = flag_updates ? _fbb.CreateVector<::flatbuffers::Offset<Flag>>(*flag_updates) : 0;
  auto new_entities__ = new_entities ? _fbb.CreateVector<::flatbuffers::Offset<Entity>>(*new_entities) : 0;
  auto entity_updates__ = entity_updates ? _fbb.CreateVector<::flatbuffers::Offset<EntityUpdate>>(*entity_updates) : 0;
  auto single_block_entity_updates__ = single_block_entity_updates ? _fbb.CreateVector<::flatbuffers::Offset<SingleBlockEntityUpdate>>(*single_block_entity_updates) : 0;
  auto dead_entities__ = dead_entities ? _fbb.CreateVector<uint64_t>(*dead_entities) : 0;
  auto new_projectiles__ = new_projectiles ? _fbb.CreateVector<::flatbuffers::Offset<Projectile>>(*new_projectiles) : 0;
  auto dead_projectiles__ = dead_projectiles ? _fbb.CreateVector<::flatbuffers::Offset<DeadProjectile>>(*dead_projectiles) : 0;
  auto explosions__ = explosions ? _fbb.CreateVector<::flatbuffers::Offset<Explosion>>(*explosions) : 0;
  return CreateGameStateDelta(
      _fbb,
      flag_updates__,
      new_entities__,
      entity_updates__,
      single_block_entity_updates__,
      dead_entities__,
      new_projectiles__,
      dead_projectiles__,
      explosions__,
      my_id,
      winner_id);
}

struct Path FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PathBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WAYPOINTS = 4
  };
  const ::flatbuffers::Vector<const Vec2 *> *waypoints() const {
    return GetPointer<const ::flatbuffers::Vector<const Vec2 *> *>(VT_WAYPOINTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WAYPOINTS) &&
           verifier.VerifyVector(waypoints()) &&
           verifier.EndTable();
  }
};

struct PathBuilder {
  typedef Path Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_waypoints(::flatbuffers::Offset<::flatbuffers::Vector<const Vec2 *>> waypoints) {
    fbb_.AddOffset(Path::VT_WAYPOINTS, waypoints);
  }
  explicit PathBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Path> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Path>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Path> CreatePath(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const Vec2 *>> waypoints = 0) {
  PathBuilder builder_(_fbb);
  builder_.add_waypoints(waypoints);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Path> CreatePathDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Vec2> *waypoints = nullptr) {
  auto waypoints__ = waypoints ? _fbb.CreateVectorOfStructs<Vec2>(*waypoints) : 0;
  return CreatePath(
      _fbb,
      waypoints__);
}

inline const GameStateDelta *GetGameStateDelta(const void *buf) {
  return ::flatbuffers::GetRoot<GameStateDelta>(buf);
}

inline const GameStateDelta *GetSizePrefixedGameStateDelta(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GameStateDelta>(buf);
}

inline bool VerifyGameStateDeltaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GameStateDelta>(nullptr);
}

inline bool VerifySizePrefixedGameStateDeltaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GameStateDelta>(nullptr);
}

inline void FinishGameStateDeltaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GameStateDelta> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameStateDeltaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GameStateDelta> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_GAMESTATE_H_
