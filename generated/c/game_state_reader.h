#ifndef GAME_STATE_READER_H
#define GAME_STATE_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

typedef struct Vec2 Vec2_t;
typedef const Vec2_t *Vec2_struct_t;
typedef Vec2_t *Vec2_mutable_struct_t;
typedef const Vec2_t *Vec2_vec_t;
typedef Vec2_t *Vec2_mutable_vec_t;

typedef const struct MissileSlot_table *MissileSlot_table_t;
typedef struct MissileSlot_table *MissileSlot_mutable_table_t;
typedef const flatbuffers_uoffset_t *MissileSlot_vec_t;
typedef flatbuffers_uoffset_t *MissileSlot_mutable_vec_t;
typedef const struct Shield_table *Shield_table_t;
typedef struct Shield_table *Shield_mutable_table_t;
typedef const flatbuffers_uoffset_t *Shield_vec_t;
typedef flatbuffers_uoffset_t *Shield_mutable_vec_t;
typedef const struct Block_table *Block_table_t;
typedef struct Block_table *Block_mutable_table_t;
typedef const flatbuffers_uoffset_t *Block_vec_t;
typedef flatbuffers_uoffset_t *Block_mutable_vec_t;
typedef const struct Explosion_table *Explosion_table_t;
typedef struct Explosion_table *Explosion_mutable_table_t;
typedef const flatbuffers_uoffset_t *Explosion_vec_t;
typedef flatbuffers_uoffset_t *Explosion_mutable_vec_t;
typedef const struct Entity_table *Entity_table_t;
typedef struct Entity_table *Entity_mutable_table_t;
typedef const flatbuffers_uoffset_t *Entity_vec_t;
typedef flatbuffers_uoffset_t *Entity_mutable_vec_t;
typedef const struct Projectile_table *Projectile_table_t;
typedef struct Projectile_table *Projectile_mutable_table_t;
typedef const flatbuffers_uoffset_t *Projectile_vec_t;
typedef flatbuffers_uoffset_t *Projectile_mutable_vec_t;
typedef const struct DeadProjectile_table *DeadProjectile_table_t;
typedef struct DeadProjectile_table *DeadProjectile_mutable_table_t;
typedef const flatbuffers_uoffset_t *DeadProjectile_vec_t;
typedef flatbuffers_uoffset_t *DeadProjectile_mutable_vec_t;
typedef const struct Flag_table *Flag_table_t;
typedef struct Flag_table *Flag_mutable_table_t;
typedef const flatbuffers_uoffset_t *Flag_vec_t;
typedef flatbuffers_uoffset_t *Flag_mutable_vec_t;
typedef const struct GameState_table *GameState_table_t;
typedef struct GameState_table *GameState_mutable_table_t;
typedef const flatbuffers_uoffset_t *GameState_vec_t;
typedef flatbuffers_uoffset_t *GameState_mutable_vec_t;
typedef const struct BlockHitUpdate_table *BlockHitUpdate_table_t;
typedef struct BlockHitUpdate_table *BlockHitUpdate_mutable_table_t;
typedef const flatbuffers_uoffset_t *BlockHitUpdate_vec_t;
typedef flatbuffers_uoffset_t *BlockHitUpdate_mutable_vec_t;
typedef const struct ThrusterUpdate_table *ThrusterUpdate_table_t;
typedef struct ThrusterUpdate_table *ThrusterUpdate_mutable_table_t;
typedef const flatbuffers_uoffset_t *ThrusterUpdate_vec_t;
typedef flatbuffers_uoffset_t *ThrusterUpdate_mutable_vec_t;
typedef const struct ShieldUpdate_table *ShieldUpdate_table_t;
typedef struct ShieldUpdate_table *ShieldUpdate_mutable_table_t;
typedef const flatbuffers_uoffset_t *ShieldUpdate_vec_t;
typedef flatbuffers_uoffset_t *ShieldUpdate_mutable_vec_t;
typedef const struct MissileSlotUpdate_table *MissileSlotUpdate_table_t;
typedef struct MissileSlotUpdate_table *MissileSlotUpdate_mutable_table_t;
typedef const flatbuffers_uoffset_t *MissileSlotUpdate_vec_t;
typedef flatbuffers_uoffset_t *MissileSlotUpdate_mutable_vec_t;
typedef const struct TurretUpdate_table *TurretUpdate_table_t;
typedef struct TurretUpdate_table *TurretUpdate_mutable_table_t;
typedef const flatbuffers_uoffset_t *TurretUpdate_vec_t;
typedef flatbuffers_uoffset_t *TurretUpdate_mutable_vec_t;
typedef const struct EntityUpdate_table *EntityUpdate_table_t;
typedef struct EntityUpdate_table *EntityUpdate_mutable_table_t;
typedef const flatbuffers_uoffset_t *EntityUpdate_vec_t;
typedef flatbuffers_uoffset_t *EntityUpdate_mutable_vec_t;
typedef const struct GameStateDelta_table *GameStateDelta_table_t;
typedef struct GameStateDelta_table *GameStateDelta_mutable_table_t;
typedef const flatbuffers_uoffset_t *GameStateDelta_vec_t;
typedef flatbuffers_uoffset_t *GameStateDelta_mutable_vec_t;
#ifndef Vec2_file_identifier
#define Vec2_file_identifier 0
#endif
/* deprecated, use Vec2_file_identifier */
#ifndef Vec2_identifier
#define Vec2_identifier 0
#endif
#define Vec2_type_hash ((flatbuffers_thash_t)0x2c3c5815)
#define Vec2_type_identifier "\x15\x58\x3c\x2c"
#ifndef Vec2_file_extension
#define Vec2_file_extension "bin"
#endif
#ifndef MissileSlot_file_identifier
#define MissileSlot_file_identifier 0
#endif
/* deprecated, use MissileSlot_file_identifier */
#ifndef MissileSlot_identifier
#define MissileSlot_identifier 0
#endif
#define MissileSlot_type_hash ((flatbuffers_thash_t)0x4610caaf)
#define MissileSlot_type_identifier "\xaf\xca\x10\x46"
#ifndef MissileSlot_file_extension
#define MissileSlot_file_extension "bin"
#endif
#ifndef Shield_file_identifier
#define Shield_file_identifier 0
#endif
/* deprecated, use Shield_file_identifier */
#ifndef Shield_identifier
#define Shield_identifier 0
#endif
#define Shield_type_hash ((flatbuffers_thash_t)0x798a26d0)
#define Shield_type_identifier "\xd0\x26\x8a\x79"
#ifndef Shield_file_extension
#define Shield_file_extension "bin"
#endif
#ifndef Block_file_identifier
#define Block_file_identifier 0
#endif
/* deprecated, use Block_file_identifier */
#ifndef Block_identifier
#define Block_identifier 0
#endif
#define Block_type_hash ((flatbuffers_thash_t)0xbd074002)
#define Block_type_identifier "\x02\x40\x07\xbd"
#ifndef Block_file_extension
#define Block_file_extension "bin"
#endif
#ifndef Explosion_file_identifier
#define Explosion_file_identifier 0
#endif
/* deprecated, use Explosion_file_identifier */
#ifndef Explosion_identifier
#define Explosion_identifier 0
#endif
#define Explosion_type_hash ((flatbuffers_thash_t)0x88a79680)
#define Explosion_type_identifier "\x80\x96\xa7\x88"
#ifndef Explosion_file_extension
#define Explosion_file_extension "bin"
#endif
#ifndef Entity_file_identifier
#define Entity_file_identifier 0
#endif
/* deprecated, use Entity_file_identifier */
#ifndef Entity_identifier
#define Entity_identifier 0
#endif
#define Entity_type_hash ((flatbuffers_thash_t)0xc09b32fa)
#define Entity_type_identifier "\xfa\x32\x9b\xc0"
#ifndef Entity_file_extension
#define Entity_file_extension "bin"
#endif
#ifndef Projectile_file_identifier
#define Projectile_file_identifier 0
#endif
/* deprecated, use Projectile_file_identifier */
#ifndef Projectile_identifier
#define Projectile_identifier 0
#endif
#define Projectile_type_hash ((flatbuffers_thash_t)0x713f51ba)
#define Projectile_type_identifier "\xba\x51\x3f\x71"
#ifndef Projectile_file_extension
#define Projectile_file_extension "bin"
#endif
#ifndef DeadProjectile_file_identifier
#define DeadProjectile_file_identifier 0
#endif
/* deprecated, use DeadProjectile_file_identifier */
#ifndef DeadProjectile_identifier
#define DeadProjectile_identifier 0
#endif
#define DeadProjectile_type_hash ((flatbuffers_thash_t)0xed25a49c)
#define DeadProjectile_type_identifier "\x9c\xa4\x25\xed"
#ifndef DeadProjectile_file_extension
#define DeadProjectile_file_extension "bin"
#endif
#ifndef Flag_file_identifier
#define Flag_file_identifier 0
#endif
/* deprecated, use Flag_file_identifier */
#ifndef Flag_identifier
#define Flag_identifier 0
#endif
#define Flag_type_hash ((flatbuffers_thash_t)0x3e16f4f7)
#define Flag_type_identifier "\xf7\xf4\x16\x3e"
#ifndef Flag_file_extension
#define Flag_file_extension "bin"
#endif
#ifndef GameState_file_identifier
#define GameState_file_identifier 0
#endif
/* deprecated, use GameState_file_identifier */
#ifndef GameState_identifier
#define GameState_identifier 0
#endif
#define GameState_type_hash ((flatbuffers_thash_t)0x392e5808)
#define GameState_type_identifier "\x08\x58\x2e\x39"
#ifndef GameState_file_extension
#define GameState_file_extension "bin"
#endif
#ifndef BlockHitUpdate_file_identifier
#define BlockHitUpdate_file_identifier 0
#endif
/* deprecated, use BlockHitUpdate_file_identifier */
#ifndef BlockHitUpdate_identifier
#define BlockHitUpdate_identifier 0
#endif
#define BlockHitUpdate_type_hash ((flatbuffers_thash_t)0xa8f70f72)
#define BlockHitUpdate_type_identifier "\x72\x0f\xf7\xa8"
#ifndef BlockHitUpdate_file_extension
#define BlockHitUpdate_file_extension "bin"
#endif
#ifndef ThrusterUpdate_file_identifier
#define ThrusterUpdate_file_identifier 0
#endif
/* deprecated, use ThrusterUpdate_file_identifier */
#ifndef ThrusterUpdate_identifier
#define ThrusterUpdate_identifier 0
#endif
#define ThrusterUpdate_type_hash ((flatbuffers_thash_t)0xdcda2bb1)
#define ThrusterUpdate_type_identifier "\xb1\x2b\xda\xdc"
#ifndef ThrusterUpdate_file_extension
#define ThrusterUpdate_file_extension "bin"
#endif
#ifndef ShieldUpdate_file_identifier
#define ShieldUpdate_file_identifier 0
#endif
/* deprecated, use ShieldUpdate_file_identifier */
#ifndef ShieldUpdate_identifier
#define ShieldUpdate_identifier 0
#endif
#define ShieldUpdate_type_hash ((flatbuffers_thash_t)0x711dcf31)
#define ShieldUpdate_type_identifier "\x31\xcf\x1d\x71"
#ifndef ShieldUpdate_file_extension
#define ShieldUpdate_file_extension "bin"
#endif
#ifndef MissileSlotUpdate_file_identifier
#define MissileSlotUpdate_file_identifier 0
#endif
/* deprecated, use MissileSlotUpdate_file_identifier */
#ifndef MissileSlotUpdate_identifier
#define MissileSlotUpdate_identifier 0
#endif
#define MissileSlotUpdate_type_hash ((flatbuffers_thash_t)0x6471b51e)
#define MissileSlotUpdate_type_identifier "\x1e\xb5\x71\x64"
#ifndef MissileSlotUpdate_file_extension
#define MissileSlotUpdate_file_extension "bin"
#endif
#ifndef TurretUpdate_file_identifier
#define TurretUpdate_file_identifier 0
#endif
/* deprecated, use TurretUpdate_file_identifier */
#ifndef TurretUpdate_identifier
#define TurretUpdate_identifier 0
#endif
#define TurretUpdate_type_hash ((flatbuffers_thash_t)0x5140d966)
#define TurretUpdate_type_identifier "\x66\xd9\x40\x51"
#ifndef TurretUpdate_file_extension
#define TurretUpdate_file_extension "bin"
#endif
#ifndef EntityUpdate_file_identifier
#define EntityUpdate_file_identifier 0
#endif
/* deprecated, use EntityUpdate_file_identifier */
#ifndef EntityUpdate_identifier
#define EntityUpdate_identifier 0
#endif
#define EntityUpdate_type_hash ((flatbuffers_thash_t)0xf2e4eab3)
#define EntityUpdate_type_identifier "\xb3\xea\xe4\xf2"
#ifndef EntityUpdate_file_extension
#define EntityUpdate_file_extension "bin"
#endif
#ifndef GameStateDelta_file_identifier
#define GameStateDelta_file_identifier 0
#endif
/* deprecated, use GameStateDelta_file_identifier */
#ifndef GameStateDelta_identifier
#define GameStateDelta_identifier 0
#endif
#define GameStateDelta_type_hash ((flatbuffers_thash_t)0xdcc9188e)
#define GameStateDelta_type_identifier "\x8e\x18\xc9\xdc"
#ifndef GameStateDelta_file_extension
#define GameStateDelta_file_extension "bin"
#endif


struct Vec2 {
    alignas(4) float x;
    alignas(4) float y;
};
static_assert(sizeof(Vec2_t) == 8, "struct size mismatch");

static inline const Vec2_t *Vec2__const_ptr_add(const Vec2_t *p, size_t i) { return p + i; }
static inline Vec2_t *Vec2__ptr_add(Vec2_t *p, size_t i) { return p + i; }
static inline Vec2_struct_t Vec2_vec_at(Vec2_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Vec2__size(void) { return 8; }
static inline size_t Vec2_vec_len(Vec2_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Vec2)

__flatbuffers_define_struct_scalar_field(Vec2, x, flatbuffers_float, float)
__flatbuffers_define_struct_scalar_field(Vec2, y, flatbuffers_float, float)


struct MissileSlot_table { uint8_t unused__; };

static inline size_t MissileSlot_vec_len(MissileSlot_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MissileSlot_table_t MissileSlot_vec_at(MissileSlot_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MissileSlot_table_t, vec, i, 0)
__flatbuffers_table_as_root(MissileSlot)

__flatbuffers_define_scalar_field(0, MissileSlot, is_loaded, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, MissileSlot, reload_timer, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, MissileSlot, x, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, MissileSlot, y, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(4, MissileSlot, local_rotation, flatbuffers_float, float, 0.00000000f)

struct Shield_table { uint8_t unused__; };

static inline size_t Shield_vec_len(Shield_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Shield_table_t Shield_vec_at(Shield_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Shield_table_t, vec, i, 0)
__flatbuffers_table_as_root(Shield)

__flatbuffers_define_scalar_field(0, Shield, is_destroyed, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, Shield, hitpoints, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, Shield, radius, flatbuffers_float, float, 0.00000000f)

struct Block_table { uint8_t unused__; };

static inline size_t Block_vec_len(Block_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Block_table_t Block_vec_at(Block_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Block_table_t, vec, i, 0)
__flatbuffers_table_as_root(Block)

__flatbuffers_define_scalar_field(0, Block, block_type, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(1, Block, feature_flags, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(2, Block, x, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, Block, y, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(4, Block, rotation, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(5, Block, hitpoints, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(6, Block, applied_thrust, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(7, Block, is_destroyed, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_vector_field(8, Block, missile_slots, MissileSlot_vec_t, 0)
__flatbuffers_define_scalar_field(9, Block, local_turret_rotation, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_table_field(10, Block, shield, Shield_table_t, 0)

struct Explosion_table { uint8_t unused__; };

static inline size_t Explosion_vec_len(Explosion_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Explosion_table_t Explosion_vec_at(Explosion_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Explosion_table_t, vec, i, 0)
__flatbuffers_table_as_root(Explosion)

__flatbuffers_define_scalar_field(0, Explosion, x, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(1, Explosion, y, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, Explosion, radius, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, Explosion, damage, flatbuffers_float, float, 0.00000000f)

struct Entity_table { uint8_t unused__; };

static inline size_t Entity_vec_len(Entity_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Entity_table_t Entity_vec_at(Entity_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Entity_table_t, vec, i, 0)
__flatbuffers_table_as_root(Entity)

__flatbuffers_define_scalar_field(0, Entity, id, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(1, Entity, my, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(2, Entity, is_commandable, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_struct_field(3, Entity, position, Vec2_struct_t, 0)
__flatbuffers_define_struct_field(4, Entity, linear_velocity, Vec2_struct_t, 0)
__flatbuffers_define_scalar_field(5, Entity, owner, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(6, Entity, rotation, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(7, Entity, angular_velocity, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_vector_field(8, Entity, blocks, Block_vec_t, 0)

struct Projectile_table { uint8_t unused__; };

static inline size_t Projectile_vec_len(Projectile_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Projectile_table_t Projectile_vec_at(Projectile_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Projectile_table_t, vec, i, 0)
__flatbuffers_table_as_root(Projectile)

__flatbuffers_define_scalar_field(0, Projectile, id, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(1, Projectile, my, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_struct_field(2, Projectile, position, Vec2_struct_t, 0)
__flatbuffers_define_struct_field(3, Projectile, linear_velocity, Vec2_struct_t, 0)
__flatbuffers_define_scalar_field(4, Projectile, damage, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(5, Projectile, size, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(6, Projectile, range, flatbuffers_float, float, 0.00000000f)

struct DeadProjectile_table { uint8_t unused__; };

static inline size_t DeadProjectile_vec_len(DeadProjectile_vec_t vec)
__flatbuffers_vec_len(vec)
static inline DeadProjectile_table_t DeadProjectile_vec_at(DeadProjectile_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(DeadProjectile_table_t, vec, i, 0)
__flatbuffers_table_as_root(DeadProjectile)

__flatbuffers_define_scalar_field(0, DeadProjectile, id, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_struct_field(1, DeadProjectile, position, Vec2_struct_t, 0)

struct Flag_table { uint8_t unused__; };

static inline size_t Flag_vec_len(Flag_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Flag_table_t Flag_vec_at(Flag_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Flag_table_t, vec, i, 0)
__flatbuffers_table_as_root(Flag)

__flatbuffers_define_scalar_field(0, Flag, owner_id, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(1, Flag, x, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, Flag, y, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, Flag, is_carried, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(4, Flag, carrier_id, flatbuffers_uint64, uint64_t, UINT64_C(0))

struct GameState_table { uint8_t unused__; };

static inline size_t GameState_vec_len(GameState_vec_t vec)
__flatbuffers_vec_len(vec)
static inline GameState_table_t GameState_vec_at(GameState_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(GameState_table_t, vec, i, 0)
__flatbuffers_table_as_root(GameState)

__flatbuffers_define_vector_field(0, GameState, flags, Flag_vec_t, 0)
__flatbuffers_define_vector_field(1, GameState, entities, Entity_vec_t, 0)
__flatbuffers_define_vector_field(2, GameState, new_projectiles, Projectile_vec_t, 0)
__flatbuffers_define_vector_field(3, GameState, dead_projectiles, DeadProjectile_vec_t, 0)
__flatbuffers_define_vector_field(4, GameState, explosions, Explosion_vec_t, 0)
__flatbuffers_define_scalar_field(5, GameState, my_id, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(6, GameState, winner_id, flatbuffers_uint8, uint8_t, UINT8_C(0))

struct BlockHitUpdate_table { uint8_t unused__; };

static inline size_t BlockHitUpdate_vec_len(BlockHitUpdate_vec_t vec)
__flatbuffers_vec_len(vec)
static inline BlockHitUpdate_table_t BlockHitUpdate_vec_at(BlockHitUpdate_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(BlockHitUpdate_table_t, vec, i, 0)
__flatbuffers_table_as_root(BlockHitUpdate)

__flatbuffers_define_scalar_field(0, BlockHitUpdate, block_index, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(1, BlockHitUpdate, hitpoints, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, BlockHitUpdate, is_destroyed, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct ThrusterUpdate_table { uint8_t unused__; };

static inline size_t ThrusterUpdate_vec_len(ThrusterUpdate_vec_t vec)
__flatbuffers_vec_len(vec)
static inline ThrusterUpdate_table_t ThrusterUpdate_vec_at(ThrusterUpdate_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(ThrusterUpdate_table_t, vec, i, 0)
__flatbuffers_table_as_root(ThrusterUpdate)

__flatbuffers_define_scalar_field(0, ThrusterUpdate, block_index, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(1, ThrusterUpdate, applied_thrust, flatbuffers_float, float, 0.00000000f)

struct ShieldUpdate_table { uint8_t unused__; };

static inline size_t ShieldUpdate_vec_len(ShieldUpdate_vec_t vec)
__flatbuffers_vec_len(vec)
static inline ShieldUpdate_table_t ShieldUpdate_vec_at(ShieldUpdate_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(ShieldUpdate_table_t, vec, i, 0)
__flatbuffers_table_as_root(ShieldUpdate)

__flatbuffers_define_scalar_field(0, ShieldUpdate, block_index, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(1, ShieldUpdate, hitpoints, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(2, ShieldUpdate, is_destroyed, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

struct MissileSlotUpdate_table { uint8_t unused__; };

static inline size_t MissileSlotUpdate_vec_len(MissileSlotUpdate_vec_t vec)
__flatbuffers_vec_len(vec)
static inline MissileSlotUpdate_table_t MissileSlotUpdate_vec_at(MissileSlotUpdate_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(MissileSlotUpdate_table_t, vec, i, 0)
__flatbuffers_table_as_root(MissileSlotUpdate)

__flatbuffers_define_scalar_field(0, MissileSlotUpdate, block_index, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(1, MissileSlotUpdate, slot_index, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(2, MissileSlotUpdate, is_loaded, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(3, MissileSlotUpdate, local_rotation, flatbuffers_float, float, 0.00000000f)

struct TurretUpdate_table { uint8_t unused__; };

static inline size_t TurretUpdate_vec_len(TurretUpdate_vec_t vec)
__flatbuffers_vec_len(vec)
static inline TurretUpdate_table_t TurretUpdate_vec_at(TurretUpdate_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(TurretUpdate_table_t, vec, i, 0)
__flatbuffers_table_as_root(TurretUpdate)

__flatbuffers_define_scalar_field(0, TurretUpdate, block_index, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(1, TurretUpdate, local_rotation, flatbuffers_float, float, 0.00000000f)

struct EntityUpdate_table { uint8_t unused__; };

static inline size_t EntityUpdate_vec_len(EntityUpdate_vec_t vec)
__flatbuffers_vec_len(vec)
static inline EntityUpdate_table_t EntityUpdate_vec_at(EntityUpdate_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(EntityUpdate_table_t, vec, i, 0)
__flatbuffers_table_as_root(EntityUpdate)

__flatbuffers_define_scalar_field(0, EntityUpdate, id, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_struct_field(1, EntityUpdate, position, Vec2_struct_t, 0)
__flatbuffers_define_struct_field(2, EntityUpdate, linear_velocity, Vec2_struct_t, 0)
__flatbuffers_define_scalar_field(3, EntityUpdate, rotation, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(4, EntityUpdate, is_commandable, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_vector_field(5, EntityUpdate, block_hit_updates, BlockHitUpdate_vec_t, 0)
__flatbuffers_define_vector_field(6, EntityUpdate, thruster_updates, ThrusterUpdate_vec_t, 0)
__flatbuffers_define_vector_field(7, EntityUpdate, shield_updates, ShieldUpdate_vec_t, 0)
__flatbuffers_define_vector_field(8, EntityUpdate, missile_slot_updates, MissileSlotUpdate_vec_t, 0)
__flatbuffers_define_vector_field(9, EntityUpdate, turret_updates, TurretUpdate_vec_t, 0)

struct GameStateDelta_table { uint8_t unused__; };

static inline size_t GameStateDelta_vec_len(GameStateDelta_vec_t vec)
__flatbuffers_vec_len(vec)
static inline GameStateDelta_table_t GameStateDelta_vec_at(GameStateDelta_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(GameStateDelta_table_t, vec, i, 0)
__flatbuffers_table_as_root(GameStateDelta)

__flatbuffers_define_vector_field(0, GameStateDelta, flag_updates, Flag_vec_t, 0)
__flatbuffers_define_vector_field(1, GameStateDelta, new_entities, Entity_vec_t, 0)
__flatbuffers_define_vector_field(2, GameStateDelta, entity_updates, EntityUpdate_vec_t, 0)
__flatbuffers_define_vector_field(3, GameStateDelta, dead_entities, flatbuffers_uint64_vec_t, 0)
__flatbuffers_define_vector_field(4, GameStateDelta, new_projectiles, Projectile_vec_t, 0)
__flatbuffers_define_vector_field(5, GameStateDelta, dead_projectiles, DeadProjectile_vec_t, 0)
__flatbuffers_define_vector_field(6, GameStateDelta, explosions, Explosion_vec_t, 0)
__flatbuffers_define_scalar_field(7, GameStateDelta, my_id, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(8, GameStateDelta, winner_id, flatbuffers_uint8, uint8_t, UINT8_C(0))


#include "flatcc/flatcc_epilogue.h"
#endif /* GAME_STATE_READER_H */
