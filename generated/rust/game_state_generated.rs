// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

// struct Vec2, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec2(pub [u8; 8]);
impl Default for Vec2 { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Vec2 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec2")
      .field("x", &self.x())
      .field("y", &self.y())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec2 {}
impl<'a> flatbuffers::Follow<'a> for Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec2>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec2 {
  type Inner = &'a Vec2;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec2>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec2 {
    type Output = Vec2;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec2 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec2 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec2 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_x(x);
    s.set_y(y);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum MissileSlotOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MissileSlot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MissileSlot<'a> {
  type Inner = MissileSlot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MissileSlot<'a> {
  pub const VT_IS_LOADED: flatbuffers::VOffsetT = 4;
  pub const VT_RELOAD_TIMER: flatbuffers::VOffsetT = 6;
  pub const VT_X: flatbuffers::VOffsetT = 8;
  pub const VT_Y: flatbuffers::VOffsetT = 10;
  pub const VT_LOCAL_ROTATION: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MissileSlot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MissileSlotArgs
  ) -> flatbuffers::WIPOffset<MissileSlot<'bldr>> {
    let mut builder = MissileSlotBuilder::new(_fbb);
    builder.add_local_rotation(args.local_rotation);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.add_reload_timer(args.reload_timer);
    builder.add_is_loaded(args.is_loaded);
    builder.finish()
  }


  #[inline]
  pub fn is_loaded(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MissileSlot::VT_IS_LOADED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn reload_timer(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MissileSlot::VT_RELOAD_TIMER, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MissileSlot::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MissileSlot::VT_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn local_rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MissileSlot::VT_LOCAL_ROTATION, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MissileSlot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("is_loaded", Self::VT_IS_LOADED, false)?
     .visit_field::<f32>("reload_timer", Self::VT_RELOAD_TIMER, false)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<f32>("local_rotation", Self::VT_LOCAL_ROTATION, false)?
     .finish();
    Ok(())
  }
}
pub struct MissileSlotArgs {
    pub is_loaded: bool,
    pub reload_timer: f32,
    pub x: f32,
    pub y: f32,
    pub local_rotation: f32,
}
impl<'a> Default for MissileSlotArgs {
  #[inline]
  fn default() -> Self {
    MissileSlotArgs {
      is_loaded: false,
      reload_timer: 0.0,
      x: 0.0,
      y: 0.0,
      local_rotation: 0.0,
    }
  }
}

pub struct MissileSlotBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MissileSlotBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_is_loaded(&mut self, is_loaded: bool) {
    self.fbb_.push_slot::<bool>(MissileSlot::VT_IS_LOADED, is_loaded, false);
  }
  #[inline]
  pub fn add_reload_timer(&mut self, reload_timer: f32) {
    self.fbb_.push_slot::<f32>(MissileSlot::VT_RELOAD_TIMER, reload_timer, 0.0);
  }
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(MissileSlot::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(MissileSlot::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_local_rotation(&mut self, local_rotation: f32) {
    self.fbb_.push_slot::<f32>(MissileSlot::VT_LOCAL_ROTATION, local_rotation, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MissileSlotBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MissileSlotBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MissileSlot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MissileSlot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MissileSlot");
      ds.field("is_loaded", &self.is_loaded());
      ds.field("reload_timer", &self.reload_timer());
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("local_rotation", &self.local_rotation());
      ds.finish()
  }
}
pub enum ShieldOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Shield<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Shield<'a> {
  type Inner = Shield<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Shield<'a> {
  pub const VT_IS_DESTROYED: flatbuffers::VOffsetT = 4;
  pub const VT_HITPOINTS: flatbuffers::VOffsetT = 6;
  pub const VT_RADIUS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Shield { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShieldArgs
  ) -> flatbuffers::WIPOffset<Shield<'bldr>> {
    let mut builder = ShieldBuilder::new(_fbb);
    builder.add_radius(args.radius);
    builder.add_hitpoints(args.hitpoints);
    builder.add_is_destroyed(args.is_destroyed);
    builder.finish()
  }


  #[inline]
  pub fn is_destroyed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Shield::VT_IS_DESTROYED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn hitpoints(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Shield::VT_HITPOINTS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn radius(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Shield::VT_RADIUS, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Shield<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("is_destroyed", Self::VT_IS_DESTROYED, false)?
     .visit_field::<f32>("hitpoints", Self::VT_HITPOINTS, false)?
     .visit_field::<f32>("radius", Self::VT_RADIUS, false)?
     .finish();
    Ok(())
  }
}
pub struct ShieldArgs {
    pub is_destroyed: bool,
    pub hitpoints: f32,
    pub radius: f32,
}
impl<'a> Default for ShieldArgs {
  #[inline]
  fn default() -> Self {
    ShieldArgs {
      is_destroyed: false,
      hitpoints: 0.0,
      radius: 0.0,
    }
  }
}

pub struct ShieldBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShieldBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_is_destroyed(&mut self, is_destroyed: bool) {
    self.fbb_.push_slot::<bool>(Shield::VT_IS_DESTROYED, is_destroyed, false);
  }
  #[inline]
  pub fn add_hitpoints(&mut self, hitpoints: f32) {
    self.fbb_.push_slot::<f32>(Shield::VT_HITPOINTS, hitpoints, 0.0);
  }
  #[inline]
  pub fn add_radius(&mut self, radius: f32) {
    self.fbb_.push_slot::<f32>(Shield::VT_RADIUS, radius, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShieldBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShieldBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Shield<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Shield<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Shield");
      ds.field("is_destroyed", &self.is_destroyed());
      ds.field("hitpoints", &self.hitpoints());
      ds.field("radius", &self.radius());
      ds.finish()
  }
}
pub enum BlockOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Block<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Block<'a> {
  type Inner = Block<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Block<'a> {
  pub const VT_BLOCK_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_FEATURE_FLAGS: flatbuffers::VOffsetT = 6;
  pub const VT_X: flatbuffers::VOffsetT = 8;
  pub const VT_Y: flatbuffers::VOffsetT = 10;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 12;
  pub const VT_HITPOINTS: flatbuffers::VOffsetT = 14;
  pub const VT_APPLIED_THRUST: flatbuffers::VOffsetT = 16;
  pub const VT_IS_DESTROYED: flatbuffers::VOffsetT = 18;
  pub const VT_MISSILE_SLOTS: flatbuffers::VOffsetT = 20;
  pub const VT_LOCAL_TURRET_ROTATION: flatbuffers::VOffsetT = 22;
  pub const VT_SHIELD: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Block { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BlockArgs<'args>
  ) -> flatbuffers::WIPOffset<Block<'bldr>> {
    let mut builder = BlockBuilder::new(_fbb);
    builder.add_feature_flags(args.feature_flags);
    if let Some(x) = args.shield { builder.add_shield(x); }
    builder.add_local_turret_rotation(args.local_turret_rotation);
    if let Some(x) = args.missile_slots { builder.add_missile_slots(x); }
    builder.add_applied_thrust(args.applied_thrust);
    builder.add_hitpoints(args.hitpoints);
    builder.add_rotation(args.rotation);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.add_block_type(args.block_type);
    builder.add_is_destroyed(args.is_destroyed);
    builder.finish()
  }


  #[inline]
  pub fn block_type(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Block::VT_BLOCK_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn feature_flags(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Block::VT_FEATURE_FLAGS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Block::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Block::VT_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Block::VT_ROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn hitpoints(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Block::VT_HITPOINTS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn applied_thrust(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Block::VT_APPLIED_THRUST, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn is_destroyed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Block::VT_IS_DESTROYED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn missile_slots(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MissileSlot<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MissileSlot>>>>(Block::VT_MISSILE_SLOTS, None)}
  }
  #[inline]
  pub fn local_turret_rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Block::VT_LOCAL_TURRET_ROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn shield(&self) -> Option<Shield<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Shield>>(Block::VT_SHIELD, None)}
  }
}

impl flatbuffers::Verifiable for Block<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("block_type", Self::VT_BLOCK_TYPE, false)?
     .visit_field::<u64>("feature_flags", Self::VT_FEATURE_FLAGS, false)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<f32>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<f32>("hitpoints", Self::VT_HITPOINTS, false)?
     .visit_field::<f32>("applied_thrust", Self::VT_APPLIED_THRUST, false)?
     .visit_field::<bool>("is_destroyed", Self::VT_IS_DESTROYED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MissileSlot>>>>("missile_slots", Self::VT_MISSILE_SLOTS, false)?
     .visit_field::<f32>("local_turret_rotation", Self::VT_LOCAL_TURRET_ROTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Shield>>("shield", Self::VT_SHIELD, false)?
     .finish();
    Ok(())
  }
}
pub struct BlockArgs<'a> {
    pub block_type: u32,
    pub feature_flags: u64,
    pub x: f32,
    pub y: f32,
    pub rotation: f32,
    pub hitpoints: f32,
    pub applied_thrust: f32,
    pub is_destroyed: bool,
    pub missile_slots: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MissileSlot<'a>>>>>,
    pub local_turret_rotation: f32,
    pub shield: Option<flatbuffers::WIPOffset<Shield<'a>>>,
}
impl<'a> Default for BlockArgs<'a> {
  #[inline]
  fn default() -> Self {
    BlockArgs {
      block_type: 0,
      feature_flags: 0,
      x: 0.0,
      y: 0.0,
      rotation: 0.0,
      hitpoints: 0.0,
      applied_thrust: 0.0,
      is_destroyed: false,
      missile_slots: None,
      local_turret_rotation: 0.0,
      shield: None,
    }
  }
}

pub struct BlockBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlockBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_block_type(&mut self, block_type: u32) {
    self.fbb_.push_slot::<u32>(Block::VT_BLOCK_TYPE, block_type, 0);
  }
  #[inline]
  pub fn add_feature_flags(&mut self, feature_flags: u64) {
    self.fbb_.push_slot::<u64>(Block::VT_FEATURE_FLAGS, feature_flags, 0);
  }
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(Block::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(Block::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: f32) {
    self.fbb_.push_slot::<f32>(Block::VT_ROTATION, rotation, 0.0);
  }
  #[inline]
  pub fn add_hitpoints(&mut self, hitpoints: f32) {
    self.fbb_.push_slot::<f32>(Block::VT_HITPOINTS, hitpoints, 0.0);
  }
  #[inline]
  pub fn add_applied_thrust(&mut self, applied_thrust: f32) {
    self.fbb_.push_slot::<f32>(Block::VT_APPLIED_THRUST, applied_thrust, 0.0);
  }
  #[inline]
  pub fn add_is_destroyed(&mut self, is_destroyed: bool) {
    self.fbb_.push_slot::<bool>(Block::VT_IS_DESTROYED, is_destroyed, false);
  }
  #[inline]
  pub fn add_missile_slots(&mut self, missile_slots: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MissileSlot<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Block::VT_MISSILE_SLOTS, missile_slots);
  }
  #[inline]
  pub fn add_local_turret_rotation(&mut self, local_turret_rotation: f32) {
    self.fbb_.push_slot::<f32>(Block::VT_LOCAL_TURRET_ROTATION, local_turret_rotation, 0.0);
  }
  #[inline]
  pub fn add_shield(&mut self, shield: flatbuffers::WIPOffset<Shield<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Shield>>(Block::VT_SHIELD, shield);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlockBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BlockBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Block<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Block<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Block");
      ds.field("block_type", &self.block_type());
      ds.field("feature_flags", &self.feature_flags());
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("rotation", &self.rotation());
      ds.field("hitpoints", &self.hitpoints());
      ds.field("applied_thrust", &self.applied_thrust());
      ds.field("is_destroyed", &self.is_destroyed());
      ds.field("missile_slots", &self.missile_slots());
      ds.field("local_turret_rotation", &self.local_turret_rotation());
      ds.field("shield", &self.shield());
      ds.finish()
  }
}
pub enum ExplosionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Explosion<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Explosion<'a> {
  type Inner = Explosion<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Explosion<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_RADIUS: flatbuffers::VOffsetT = 8;
  pub const VT_DAMAGE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Explosion { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ExplosionArgs
  ) -> flatbuffers::WIPOffset<Explosion<'bldr>> {
    let mut builder = ExplosionBuilder::new(_fbb);
    builder.add_damage(args.damage);
    builder.add_radius(args.radius);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Explosion::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Explosion::VT_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn radius(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Explosion::VT_RADIUS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn damage(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Explosion::VT_DAMAGE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Explosion<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<f32>("radius", Self::VT_RADIUS, false)?
     .visit_field::<f32>("damage", Self::VT_DAMAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ExplosionArgs {
    pub x: f32,
    pub y: f32,
    pub radius: f32,
    pub damage: f32,
}
impl<'a> Default for ExplosionArgs {
  #[inline]
  fn default() -> Self {
    ExplosionArgs {
      x: 0.0,
      y: 0.0,
      radius: 0.0,
      damage: 0.0,
    }
  }
}

pub struct ExplosionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ExplosionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(Explosion::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(Explosion::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_radius(&mut self, radius: f32) {
    self.fbb_.push_slot::<f32>(Explosion::VT_RADIUS, radius, 0.0);
  }
  #[inline]
  pub fn add_damage(&mut self, damage: f32) {
    self.fbb_.push_slot::<f32>(Explosion::VT_DAMAGE, damage, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ExplosionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ExplosionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Explosion<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Explosion<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Explosion");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("radius", &self.radius());
      ds.field("damage", &self.damage());
      ds.finish()
  }
}
pub enum EntityOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Entity<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Entity<'a> {
  type Inner = Entity<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Entity<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_MY: flatbuffers::VOffsetT = 6;
  pub const VT_IS_COMMANDABLE: flatbuffers::VOffsetT = 8;
  pub const VT_POSITION: flatbuffers::VOffsetT = 10;
  pub const VT_LINEAR_VELOCITY: flatbuffers::VOffsetT = 12;
  pub const VT_OWNER: flatbuffers::VOffsetT = 14;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 16;
  pub const VT_ANGULAR_VELOCITY: flatbuffers::VOffsetT = 18;
  pub const VT_BLOCKS: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Entity { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EntityArgs<'args>
  ) -> flatbuffers::WIPOffset<Entity<'bldr>> {
    let mut builder = EntityBuilder::new(_fbb);
    builder.add_id(args.id);
    if let Some(x) = args.blocks { builder.add_blocks(x); }
    builder.add_angular_velocity(args.angular_velocity);
    builder.add_rotation(args.rotation);
    if let Some(x) = args.linear_velocity { builder.add_linear_velocity(x); }
    if let Some(x) = args.position { builder.add_position(x); }
    builder.add_owner(args.owner);
    builder.add_is_commandable(args.is_commandable);
    builder.add_my(args.my);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Entity::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn my(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Entity::VT_MY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn is_commandable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Entity::VT_IS_COMMANDABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn position(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(Entity::VT_POSITION, None)}
  }
  #[inline]
  pub fn linear_velocity(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(Entity::VT_LINEAR_VELOCITY, None)}
  }
  #[inline]
  pub fn owner(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(Entity::VT_OWNER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Entity::VT_ROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn angular_velocity(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Entity::VT_ANGULAR_VELOCITY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn blocks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Block<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Block>>>>(Entity::VT_BLOCKS, None)}
  }
}

impl flatbuffers::Verifiable for Entity<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<bool>("my", Self::VT_MY, false)?
     .visit_field::<bool>("is_commandable", Self::VT_IS_COMMANDABLE, false)?
     .visit_field::<Vec2>("position", Self::VT_POSITION, false)?
     .visit_field::<Vec2>("linear_velocity", Self::VT_LINEAR_VELOCITY, false)?
     .visit_field::<u8>("owner", Self::VT_OWNER, false)?
     .visit_field::<f32>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<f32>("angular_velocity", Self::VT_ANGULAR_VELOCITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Block>>>>("blocks", Self::VT_BLOCKS, false)?
     .finish();
    Ok(())
  }
}
pub struct EntityArgs<'a> {
    pub id: u64,
    pub my: bool,
    pub is_commandable: bool,
    pub position: Option<&'a Vec2>,
    pub linear_velocity: Option<&'a Vec2>,
    pub owner: u8,
    pub rotation: f32,
    pub angular_velocity: f32,
    pub blocks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Block<'a>>>>>,
}
impl<'a> Default for EntityArgs<'a> {
  #[inline]
  fn default() -> Self {
    EntityArgs {
      id: 0,
      my: false,
      is_commandable: false,
      position: None,
      linear_velocity: None,
      owner: 0,
      rotation: 0.0,
      angular_velocity: 0.0,
      blocks: None,
    }
  }
}

pub struct EntityBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EntityBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Entity::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_my(&mut self, my: bool) {
    self.fbb_.push_slot::<bool>(Entity::VT_MY, my, false);
  }
  #[inline]
  pub fn add_is_commandable(&mut self, is_commandable: bool) {
    self.fbb_.push_slot::<bool>(Entity::VT_IS_COMMANDABLE, is_commandable, false);
  }
  #[inline]
  pub fn add_position(&mut self, position: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(Entity::VT_POSITION, position);
  }
  #[inline]
  pub fn add_linear_velocity(&mut self, linear_velocity: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(Entity::VT_LINEAR_VELOCITY, linear_velocity);
  }
  #[inline]
  pub fn add_owner(&mut self, owner: u8) {
    self.fbb_.push_slot::<u8>(Entity::VT_OWNER, owner, 0);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: f32) {
    self.fbb_.push_slot::<f32>(Entity::VT_ROTATION, rotation, 0.0);
  }
  #[inline]
  pub fn add_angular_velocity(&mut self, angular_velocity: f32) {
    self.fbb_.push_slot::<f32>(Entity::VT_ANGULAR_VELOCITY, angular_velocity, 0.0);
  }
  #[inline]
  pub fn add_blocks(&mut self, blocks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Block<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entity::VT_BLOCKS, blocks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EntityBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EntityBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Entity<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Entity<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Entity");
      ds.field("id", &self.id());
      ds.field("my", &self.my());
      ds.field("is_commandable", &self.is_commandable());
      ds.field("position", &self.position());
      ds.field("linear_velocity", &self.linear_velocity());
      ds.field("owner", &self.owner());
      ds.field("rotation", &self.rotation());
      ds.field("angular_velocity", &self.angular_velocity());
      ds.field("blocks", &self.blocks());
      ds.finish()
  }
}
pub enum ProjectileOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Projectile<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Projectile<'a> {
  type Inner = Projectile<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Projectile<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_MY: flatbuffers::VOffsetT = 6;
  pub const VT_POSITION: flatbuffers::VOffsetT = 8;
  pub const VT_LINEAR_VELOCITY: flatbuffers::VOffsetT = 10;
  pub const VT_DAMAGE: flatbuffers::VOffsetT = 12;
  pub const VT_SIZE_: flatbuffers::VOffsetT = 14;
  pub const VT_RANGE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Projectile { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ProjectileArgs<'args>
  ) -> flatbuffers::WIPOffset<Projectile<'bldr>> {
    let mut builder = ProjectileBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.add_range(args.range);
    builder.add_size_(args.size_);
    builder.add_damage(args.damage);
    if let Some(x) = args.linear_velocity { builder.add_linear_velocity(x); }
    if let Some(x) = args.position { builder.add_position(x); }
    builder.add_my(args.my);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Projectile::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn my(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Projectile::VT_MY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn position(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(Projectile::VT_POSITION, None)}
  }
  #[inline]
  pub fn linear_velocity(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(Projectile::VT_LINEAR_VELOCITY, None)}
  }
  #[inline]
  pub fn damage(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Projectile::VT_DAMAGE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn size_(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Projectile::VT_SIZE_, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn range(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Projectile::VT_RANGE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Projectile<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<bool>("my", Self::VT_MY, false)?
     .visit_field::<Vec2>("position", Self::VT_POSITION, false)?
     .visit_field::<Vec2>("linear_velocity", Self::VT_LINEAR_VELOCITY, false)?
     .visit_field::<f32>("damage", Self::VT_DAMAGE, false)?
     .visit_field::<f32>("size_", Self::VT_SIZE_, false)?
     .visit_field::<f32>("range", Self::VT_RANGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ProjectileArgs<'a> {
    pub id: u64,
    pub my: bool,
    pub position: Option<&'a Vec2>,
    pub linear_velocity: Option<&'a Vec2>,
    pub damage: f32,
    pub size_: f32,
    pub range: f32,
}
impl<'a> Default for ProjectileArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProjectileArgs {
      id: 0,
      my: false,
      position: None,
      linear_velocity: None,
      damage: 0.0,
      size_: 0.0,
      range: 0.0,
    }
  }
}

pub struct ProjectileBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ProjectileBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Projectile::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_my(&mut self, my: bool) {
    self.fbb_.push_slot::<bool>(Projectile::VT_MY, my, false);
  }
  #[inline]
  pub fn add_position(&mut self, position: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(Projectile::VT_POSITION, position);
  }
  #[inline]
  pub fn add_linear_velocity(&mut self, linear_velocity: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(Projectile::VT_LINEAR_VELOCITY, linear_velocity);
  }
  #[inline]
  pub fn add_damage(&mut self, damage: f32) {
    self.fbb_.push_slot::<f32>(Projectile::VT_DAMAGE, damage, 0.0);
  }
  #[inline]
  pub fn add_size_(&mut self, size_: f32) {
    self.fbb_.push_slot::<f32>(Projectile::VT_SIZE_, size_, 0.0);
  }
  #[inline]
  pub fn add_range(&mut self, range: f32) {
    self.fbb_.push_slot::<f32>(Projectile::VT_RANGE, range, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ProjectileBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ProjectileBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Projectile<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Projectile<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Projectile");
      ds.field("id", &self.id());
      ds.field("my", &self.my());
      ds.field("position", &self.position());
      ds.field("linear_velocity", &self.linear_velocity());
      ds.field("damage", &self.damage());
      ds.field("size_", &self.size_());
      ds.field("range", &self.range());
      ds.finish()
  }
}
pub enum DeadProjectileOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeadProjectile<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeadProjectile<'a> {
  type Inner = DeadProjectile<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DeadProjectile<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POSITION: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeadProjectile { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DeadProjectileArgs<'args>
  ) -> flatbuffers::WIPOffset<DeadProjectile<'bldr>> {
    let mut builder = DeadProjectileBuilder::new(_fbb);
    builder.add_id(args.id);
    if let Some(x) = args.position { builder.add_position(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(DeadProjectile::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn position(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(DeadProjectile::VT_POSITION, None)}
  }
}

impl flatbuffers::Verifiable for DeadProjectile<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<Vec2>("position", Self::VT_POSITION, false)?
     .finish();
    Ok(())
  }
}
pub struct DeadProjectileArgs<'a> {
    pub id: u64,
    pub position: Option<&'a Vec2>,
}
impl<'a> Default for DeadProjectileArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeadProjectileArgs {
      id: 0,
      position: None,
    }
  }
}

pub struct DeadProjectileBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DeadProjectileBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(DeadProjectile::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_position(&mut self, position: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(DeadProjectile::VT_POSITION, position);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DeadProjectileBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DeadProjectileBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeadProjectile<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DeadProjectile<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DeadProjectile");
      ds.field("id", &self.id());
      ds.field("position", &self.position());
      ds.finish()
  }
}
pub enum FlagOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Flag<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Flag<'a> {
  type Inner = Flag<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Flag<'a> {
  pub const VT_OWNER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_X: flatbuffers::VOffsetT = 6;
  pub const VT_Y: flatbuffers::VOffsetT = 8;
  pub const VT_IS_CARRIED: flatbuffers::VOffsetT = 10;
  pub const VT_CARRIER_ID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Flag { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FlagArgs
  ) -> flatbuffers::WIPOffset<Flag<'bldr>> {
    let mut builder = FlagBuilder::new(_fbb);
    builder.add_carrier_id(args.carrier_id);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.add_is_carried(args.is_carried);
    builder.add_owner_id(args.owner_id);
    builder.finish()
  }


  #[inline]
  pub fn owner_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(Flag::VT_OWNER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Flag::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Flag::VT_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn is_carried(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Flag::VT_IS_CARRIED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn carrier_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Flag::VT_CARRIER_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Flag<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("owner_id", Self::VT_OWNER_ID, false)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<bool>("is_carried", Self::VT_IS_CARRIED, false)?
     .visit_field::<u64>("carrier_id", Self::VT_CARRIER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct FlagArgs {
    pub owner_id: u8,
    pub x: f32,
    pub y: f32,
    pub is_carried: bool,
    pub carrier_id: u64,
}
impl<'a> Default for FlagArgs {
  #[inline]
  fn default() -> Self {
    FlagArgs {
      owner_id: 0,
      x: 0.0,
      y: 0.0,
      is_carried: false,
      carrier_id: 0,
    }
  }
}

pub struct FlagBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FlagBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_owner_id(&mut self, owner_id: u8) {
    self.fbb_.push_slot::<u8>(Flag::VT_OWNER_ID, owner_id, 0);
  }
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(Flag::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(Flag::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_is_carried(&mut self, is_carried: bool) {
    self.fbb_.push_slot::<bool>(Flag::VT_IS_CARRIED, is_carried, false);
  }
  #[inline]
  pub fn add_carrier_id(&mut self, carrier_id: u64) {
    self.fbb_.push_slot::<u64>(Flag::VT_CARRIER_ID, carrier_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FlagBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FlagBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Flag<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Flag<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Flag");
      ds.field("owner_id", &self.owner_id());
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("is_carried", &self.is_carried());
      ds.field("carrier_id", &self.carrier_id());
      ds.finish()
  }
}
pub enum GameStateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GameState<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GameState<'a> {
  type Inner = GameState<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GameState<'a> {
  pub const VT_FLAGS: flatbuffers::VOffsetT = 4;
  pub const VT_ENTITIES: flatbuffers::VOffsetT = 6;
  pub const VT_NEW_PROJECTILES: flatbuffers::VOffsetT = 8;
  pub const VT_DEAD_PROJECTILES: flatbuffers::VOffsetT = 10;
  pub const VT_EXPLOSIONS: flatbuffers::VOffsetT = 12;
  pub const VT_MY_ID: flatbuffers::VOffsetT = 14;
  pub const VT_WINNER_ID: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GameState { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GameStateArgs<'args>
  ) -> flatbuffers::WIPOffset<GameState<'bldr>> {
    let mut builder = GameStateBuilder::new(_fbb);
    if let Some(x) = args.explosions { builder.add_explosions(x); }
    if let Some(x) = args.dead_projectiles { builder.add_dead_projectiles(x); }
    if let Some(x) = args.new_projectiles { builder.add_new_projectiles(x); }
    if let Some(x) = args.entities { builder.add_entities(x); }
    if let Some(x) = args.flags { builder.add_flags(x); }
    builder.add_winner_id(args.winner_id);
    builder.add_my_id(args.my_id);
    builder.finish()
  }


  #[inline]
  pub fn flags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Flag<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Flag>>>>(GameState::VT_FLAGS, None)}
  }
  #[inline]
  pub fn entities(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity>>>>(GameState::VT_ENTITIES, None)}
  }
  #[inline]
  pub fn new_projectiles(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Projectile<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Projectile>>>>(GameState::VT_NEW_PROJECTILES, None)}
  }
  #[inline]
  pub fn dead_projectiles(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeadProjectile<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeadProjectile>>>>(GameState::VT_DEAD_PROJECTILES, None)}
  }
  #[inline]
  pub fn explosions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Explosion<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Explosion>>>>(GameState::VT_EXPLOSIONS, None)}
  }
  #[inline]
  pub fn my_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(GameState::VT_MY_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn winner_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(GameState::VT_WINNER_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GameState<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Flag>>>>("flags", Self::VT_FLAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Entity>>>>("entities", Self::VT_ENTITIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Projectile>>>>("new_projectiles", Self::VT_NEW_PROJECTILES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<DeadProjectile>>>>("dead_projectiles", Self::VT_DEAD_PROJECTILES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Explosion>>>>("explosions", Self::VT_EXPLOSIONS, false)?
     .visit_field::<u8>("my_id", Self::VT_MY_ID, false)?
     .visit_field::<u8>("winner_id", Self::VT_WINNER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct GameStateArgs<'a> {
    pub flags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Flag<'a>>>>>,
    pub entities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity<'a>>>>>,
    pub new_projectiles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Projectile<'a>>>>>,
    pub dead_projectiles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeadProjectile<'a>>>>>,
    pub explosions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Explosion<'a>>>>>,
    pub my_id: u8,
    pub winner_id: u8,
}
impl<'a> Default for GameStateArgs<'a> {
  #[inline]
  fn default() -> Self {
    GameStateArgs {
      flags: None,
      entities: None,
      new_projectiles: None,
      dead_projectiles: None,
      explosions: None,
      my_id: 0,
      winner_id: 0,
    }
  }
}

pub struct GameStateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GameStateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_flags(&mut self, flags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Flag<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameState::VT_FLAGS, flags);
  }
  #[inline]
  pub fn add_entities(&mut self, entities: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Entity<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameState::VT_ENTITIES, entities);
  }
  #[inline]
  pub fn add_new_projectiles(&mut self, new_projectiles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Projectile<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameState::VT_NEW_PROJECTILES, new_projectiles);
  }
  #[inline]
  pub fn add_dead_projectiles(&mut self, dead_projectiles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<DeadProjectile<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameState::VT_DEAD_PROJECTILES, dead_projectiles);
  }
  #[inline]
  pub fn add_explosions(&mut self, explosions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Explosion<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameState::VT_EXPLOSIONS, explosions);
  }
  #[inline]
  pub fn add_my_id(&mut self, my_id: u8) {
    self.fbb_.push_slot::<u8>(GameState::VT_MY_ID, my_id, 0);
  }
  #[inline]
  pub fn add_winner_id(&mut self, winner_id: u8) {
    self.fbb_.push_slot::<u8>(GameState::VT_WINNER_ID, winner_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GameStateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GameStateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GameState<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GameState<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GameState");
      ds.field("flags", &self.flags());
      ds.field("entities", &self.entities());
      ds.field("new_projectiles", &self.new_projectiles());
      ds.field("dead_projectiles", &self.dead_projectiles());
      ds.field("explosions", &self.explosions());
      ds.field("my_id", &self.my_id());
      ds.field("winner_id", &self.winner_id());
      ds.finish()
  }
}
pub enum BlockHitUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlockHitUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockHitUpdate<'a> {
  type Inner = BlockHitUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BlockHitUpdate<'a> {
  pub const VT_BLOCK_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_HITPOINTS: flatbuffers::VOffsetT = 6;
  pub const VT_IS_DESTROYED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BlockHitUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BlockHitUpdateArgs
  ) -> flatbuffers::WIPOffset<BlockHitUpdate<'bldr>> {
    let mut builder = BlockHitUpdateBuilder::new(_fbb);
    builder.add_hitpoints(args.hitpoints);
    builder.add_block_index(args.block_index);
    builder.add_is_destroyed(args.is_destroyed);
    builder.finish()
  }


  #[inline]
  pub fn block_index(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(BlockHitUpdate::VT_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hitpoints(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(BlockHitUpdate::VT_HITPOINTS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn is_destroyed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BlockHitUpdate::VT_IS_DESTROYED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BlockHitUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("block_index", Self::VT_BLOCK_INDEX, false)?
     .visit_field::<f32>("hitpoints", Self::VT_HITPOINTS, false)?
     .visit_field::<bool>("is_destroyed", Self::VT_IS_DESTROYED, false)?
     .finish();
    Ok(())
  }
}
pub struct BlockHitUpdateArgs {
    pub block_index: u16,
    pub hitpoints: f32,
    pub is_destroyed: bool,
}
impl<'a> Default for BlockHitUpdateArgs {
  #[inline]
  fn default() -> Self {
    BlockHitUpdateArgs {
      block_index: 0,
      hitpoints: 0.0,
      is_destroyed: false,
    }
  }
}

pub struct BlockHitUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlockHitUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_block_index(&mut self, block_index: u16) {
    self.fbb_.push_slot::<u16>(BlockHitUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  #[inline]
  pub fn add_hitpoints(&mut self, hitpoints: f32) {
    self.fbb_.push_slot::<f32>(BlockHitUpdate::VT_HITPOINTS, hitpoints, 0.0);
  }
  #[inline]
  pub fn add_is_destroyed(&mut self, is_destroyed: bool) {
    self.fbb_.push_slot::<bool>(BlockHitUpdate::VT_IS_DESTROYED, is_destroyed, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlockHitUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BlockHitUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BlockHitUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BlockHitUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BlockHitUpdate");
      ds.field("block_index", &self.block_index());
      ds.field("hitpoints", &self.hitpoints());
      ds.field("is_destroyed", &self.is_destroyed());
      ds.finish()
  }
}
pub enum ThrusterUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ThrusterUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ThrusterUpdate<'a> {
  type Inner = ThrusterUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ThrusterUpdate<'a> {
  pub const VT_BLOCK_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_APPLIED_THRUST: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ThrusterUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ThrusterUpdateArgs
  ) -> flatbuffers::WIPOffset<ThrusterUpdate<'bldr>> {
    let mut builder = ThrusterUpdateBuilder::new(_fbb);
    builder.add_applied_thrust(args.applied_thrust);
    builder.add_block_index(args.block_index);
    builder.finish()
  }


  #[inline]
  pub fn block_index(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(ThrusterUpdate::VT_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn applied_thrust(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ThrusterUpdate::VT_APPLIED_THRUST, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ThrusterUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("block_index", Self::VT_BLOCK_INDEX, false)?
     .visit_field::<f32>("applied_thrust", Self::VT_APPLIED_THRUST, false)?
     .finish();
    Ok(())
  }
}
pub struct ThrusterUpdateArgs {
    pub block_index: u16,
    pub applied_thrust: f32,
}
impl<'a> Default for ThrusterUpdateArgs {
  #[inline]
  fn default() -> Self {
    ThrusterUpdateArgs {
      block_index: 0,
      applied_thrust: 0.0,
    }
  }
}

pub struct ThrusterUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ThrusterUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_block_index(&mut self, block_index: u16) {
    self.fbb_.push_slot::<u16>(ThrusterUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  #[inline]
  pub fn add_applied_thrust(&mut self, applied_thrust: f32) {
    self.fbb_.push_slot::<f32>(ThrusterUpdate::VT_APPLIED_THRUST, applied_thrust, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ThrusterUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ThrusterUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ThrusterUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ThrusterUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ThrusterUpdate");
      ds.field("block_index", &self.block_index());
      ds.field("applied_thrust", &self.applied_thrust());
      ds.finish()
  }
}
pub enum ShieldUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShieldUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShieldUpdate<'a> {
  type Inner = ShieldUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShieldUpdate<'a> {
  pub const VT_BLOCK_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_HITPOINTS: flatbuffers::VOffsetT = 6;
  pub const VT_IS_DESTROYED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShieldUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShieldUpdateArgs
  ) -> flatbuffers::WIPOffset<ShieldUpdate<'bldr>> {
    let mut builder = ShieldUpdateBuilder::new(_fbb);
    builder.add_hitpoints(args.hitpoints);
    builder.add_block_index(args.block_index);
    builder.add_is_destroyed(args.is_destroyed);
    builder.finish()
  }


  #[inline]
  pub fn block_index(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(ShieldUpdate::VT_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hitpoints(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ShieldUpdate::VT_HITPOINTS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn is_destroyed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShieldUpdate::VT_IS_DESTROYED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ShieldUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("block_index", Self::VT_BLOCK_INDEX, false)?
     .visit_field::<f32>("hitpoints", Self::VT_HITPOINTS, false)?
     .visit_field::<bool>("is_destroyed", Self::VT_IS_DESTROYED, false)?
     .finish();
    Ok(())
  }
}
pub struct ShieldUpdateArgs {
    pub block_index: u16,
    pub hitpoints: f32,
    pub is_destroyed: bool,
}
impl<'a> Default for ShieldUpdateArgs {
  #[inline]
  fn default() -> Self {
    ShieldUpdateArgs {
      block_index: 0,
      hitpoints: 0.0,
      is_destroyed: false,
    }
  }
}

pub struct ShieldUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShieldUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_block_index(&mut self, block_index: u16) {
    self.fbb_.push_slot::<u16>(ShieldUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  #[inline]
  pub fn add_hitpoints(&mut self, hitpoints: f32) {
    self.fbb_.push_slot::<f32>(ShieldUpdate::VT_HITPOINTS, hitpoints, 0.0);
  }
  #[inline]
  pub fn add_is_destroyed(&mut self, is_destroyed: bool) {
    self.fbb_.push_slot::<bool>(ShieldUpdate::VT_IS_DESTROYED, is_destroyed, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShieldUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShieldUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShieldUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShieldUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShieldUpdate");
      ds.field("block_index", &self.block_index());
      ds.field("hitpoints", &self.hitpoints());
      ds.field("is_destroyed", &self.is_destroyed());
      ds.finish()
  }
}
pub enum MissileSlotUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MissileSlotUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MissileSlotUpdate<'a> {
  type Inner = MissileSlotUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MissileSlotUpdate<'a> {
  pub const VT_BLOCK_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_SLOT_INDEX: flatbuffers::VOffsetT = 6;
  pub const VT_IS_LOADED: flatbuffers::VOffsetT = 8;
  pub const VT_LOCAL_ROTATION: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MissileSlotUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MissileSlotUpdateArgs
  ) -> flatbuffers::WIPOffset<MissileSlotUpdate<'bldr>> {
    let mut builder = MissileSlotUpdateBuilder::new(_fbb);
    builder.add_local_rotation(args.local_rotation);
    builder.add_block_index(args.block_index);
    builder.add_is_loaded(args.is_loaded);
    builder.add_slot_index(args.slot_index);
    builder.finish()
  }


  #[inline]
  pub fn block_index(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(MissileSlotUpdate::VT_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn slot_index(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(MissileSlotUpdate::VT_SLOT_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn is_loaded(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MissileSlotUpdate::VT_IS_LOADED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn local_rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MissileSlotUpdate::VT_LOCAL_ROTATION, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MissileSlotUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("block_index", Self::VT_BLOCK_INDEX, false)?
     .visit_field::<u8>("slot_index", Self::VT_SLOT_INDEX, false)?
     .visit_field::<bool>("is_loaded", Self::VT_IS_LOADED, false)?
     .visit_field::<f32>("local_rotation", Self::VT_LOCAL_ROTATION, false)?
     .finish();
    Ok(())
  }
}
pub struct MissileSlotUpdateArgs {
    pub block_index: u16,
    pub slot_index: u8,
    pub is_loaded: bool,
    pub local_rotation: f32,
}
impl<'a> Default for MissileSlotUpdateArgs {
  #[inline]
  fn default() -> Self {
    MissileSlotUpdateArgs {
      block_index: 0,
      slot_index: 0,
      is_loaded: false,
      local_rotation: 0.0,
    }
  }
}

pub struct MissileSlotUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MissileSlotUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_block_index(&mut self, block_index: u16) {
    self.fbb_.push_slot::<u16>(MissileSlotUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  #[inline]
  pub fn add_slot_index(&mut self, slot_index: u8) {
    self.fbb_.push_slot::<u8>(MissileSlotUpdate::VT_SLOT_INDEX, slot_index, 0);
  }
  #[inline]
  pub fn add_is_loaded(&mut self, is_loaded: bool) {
    self.fbb_.push_slot::<bool>(MissileSlotUpdate::VT_IS_LOADED, is_loaded, false);
  }
  #[inline]
  pub fn add_local_rotation(&mut self, local_rotation: f32) {
    self.fbb_.push_slot::<f32>(MissileSlotUpdate::VT_LOCAL_ROTATION, local_rotation, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MissileSlotUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MissileSlotUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MissileSlotUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MissileSlotUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MissileSlotUpdate");
      ds.field("block_index", &self.block_index());
      ds.field("slot_index", &self.slot_index());
      ds.field("is_loaded", &self.is_loaded());
      ds.field("local_rotation", &self.local_rotation());
      ds.finish()
  }
}
pub enum TurretUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TurretUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TurretUpdate<'a> {
  type Inner = TurretUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TurretUpdate<'a> {
  pub const VT_BLOCK_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_LOCAL_ROTATION: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TurretUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TurretUpdateArgs
  ) -> flatbuffers::WIPOffset<TurretUpdate<'bldr>> {
    let mut builder = TurretUpdateBuilder::new(_fbb);
    builder.add_local_rotation(args.local_rotation);
    builder.add_block_index(args.block_index);
    builder.finish()
  }


  #[inline]
  pub fn block_index(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(TurretUpdate::VT_BLOCK_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn local_rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TurretUpdate::VT_LOCAL_ROTATION, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TurretUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("block_index", Self::VT_BLOCK_INDEX, false)?
     .visit_field::<f32>("local_rotation", Self::VT_LOCAL_ROTATION, false)?
     .finish();
    Ok(())
  }
}
pub struct TurretUpdateArgs {
    pub block_index: u16,
    pub local_rotation: f32,
}
impl<'a> Default for TurretUpdateArgs {
  #[inline]
  fn default() -> Self {
    TurretUpdateArgs {
      block_index: 0,
      local_rotation: 0.0,
    }
  }
}

pub struct TurretUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TurretUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_block_index(&mut self, block_index: u16) {
    self.fbb_.push_slot::<u16>(TurretUpdate::VT_BLOCK_INDEX, block_index, 0);
  }
  #[inline]
  pub fn add_local_rotation(&mut self, local_rotation: f32) {
    self.fbb_.push_slot::<f32>(TurretUpdate::VT_LOCAL_ROTATION, local_rotation, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TurretUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TurretUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TurretUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TurretUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TurretUpdate");
      ds.field("block_index", &self.block_index());
      ds.field("local_rotation", &self.local_rotation());
      ds.finish()
  }
}
pub enum EntityUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EntityUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EntityUpdate<'a> {
  type Inner = EntityUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EntityUpdate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POSITION: flatbuffers::VOffsetT = 6;
  pub const VT_LINEAR_VELOCITY: flatbuffers::VOffsetT = 8;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 10;
  pub const VT_IS_COMMANDABLE: flatbuffers::VOffsetT = 12;
  pub const VT_BLOCK_HIT_UPDATES: flatbuffers::VOffsetT = 14;
  pub const VT_THRUSTER_UPDATES: flatbuffers::VOffsetT = 16;
  pub const VT_SHIELD_UPDATES: flatbuffers::VOffsetT = 18;
  pub const VT_MISSILE_SLOT_UPDATES: flatbuffers::VOffsetT = 20;
  pub const VT_TURRET_UPDATES: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EntityUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EntityUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<EntityUpdate<'bldr>> {
    let mut builder = EntityUpdateBuilder::new(_fbb);
    builder.add_id(args.id);
    if let Some(x) = args.turret_updates { builder.add_turret_updates(x); }
    if let Some(x) = args.missile_slot_updates { builder.add_missile_slot_updates(x); }
    if let Some(x) = args.shield_updates { builder.add_shield_updates(x); }
    if let Some(x) = args.thruster_updates { builder.add_thruster_updates(x); }
    if let Some(x) = args.block_hit_updates { builder.add_block_hit_updates(x); }
    builder.add_rotation(args.rotation);
    if let Some(x) = args.linear_velocity { builder.add_linear_velocity(x); }
    if let Some(x) = args.position { builder.add_position(x); }
    builder.add_is_commandable(args.is_commandable);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(EntityUpdate::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn position(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(EntityUpdate::VT_POSITION, None)}
  }
  #[inline]
  pub fn linear_velocity(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(EntityUpdate::VT_LINEAR_VELOCITY, None)}
  }
  #[inline]
  pub fn rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EntityUpdate::VT_ROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn is_commandable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EntityUpdate::VT_IS_COMMANDABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn block_hit_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockHitUpdate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockHitUpdate>>>>(EntityUpdate::VT_BLOCK_HIT_UPDATES, None)}
  }
  #[inline]
  pub fn thruster_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ThrusterUpdate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ThrusterUpdate>>>>(EntityUpdate::VT_THRUSTER_UPDATES, None)}
  }
  #[inline]
  pub fn shield_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ShieldUpdate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ShieldUpdate>>>>(EntityUpdate::VT_SHIELD_UPDATES, None)}
  }
  #[inline]
  pub fn missile_slot_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MissileSlotUpdate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MissileSlotUpdate>>>>(EntityUpdate::VT_MISSILE_SLOT_UPDATES, None)}
  }
  #[inline]
  pub fn turret_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TurretUpdate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TurretUpdate>>>>(EntityUpdate::VT_TURRET_UPDATES, None)}
  }
}

impl flatbuffers::Verifiable for EntityUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<Vec2>("position", Self::VT_POSITION, false)?
     .visit_field::<Vec2>("linear_velocity", Self::VT_LINEAR_VELOCITY, false)?
     .visit_field::<f32>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<bool>("is_commandable", Self::VT_IS_COMMANDABLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BlockHitUpdate>>>>("block_hit_updates", Self::VT_BLOCK_HIT_UPDATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ThrusterUpdate>>>>("thruster_updates", Self::VT_THRUSTER_UPDATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ShieldUpdate>>>>("shield_updates", Self::VT_SHIELD_UPDATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MissileSlotUpdate>>>>("missile_slot_updates", Self::VT_MISSILE_SLOT_UPDATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TurretUpdate>>>>("turret_updates", Self::VT_TURRET_UPDATES, false)?
     .finish();
    Ok(())
  }
}
pub struct EntityUpdateArgs<'a> {
    pub id: u64,
    pub position: Option<&'a Vec2>,
    pub linear_velocity: Option<&'a Vec2>,
    pub rotation: f32,
    pub is_commandable: bool,
    pub block_hit_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockHitUpdate<'a>>>>>,
    pub thruster_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ThrusterUpdate<'a>>>>>,
    pub shield_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ShieldUpdate<'a>>>>>,
    pub missile_slot_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MissileSlotUpdate<'a>>>>>,
    pub turret_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TurretUpdate<'a>>>>>,
}
impl<'a> Default for EntityUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    EntityUpdateArgs {
      id: 0,
      position: None,
      linear_velocity: None,
      rotation: 0.0,
      is_commandable: false,
      block_hit_updates: None,
      thruster_updates: None,
      shield_updates: None,
      missile_slot_updates: None,
      turret_updates: None,
    }
  }
}

pub struct EntityUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EntityUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(EntityUpdate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_position(&mut self, position: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(EntityUpdate::VT_POSITION, position);
  }
  #[inline]
  pub fn add_linear_velocity(&mut self, linear_velocity: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(EntityUpdate::VT_LINEAR_VELOCITY, linear_velocity);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: f32) {
    self.fbb_.push_slot::<f32>(EntityUpdate::VT_ROTATION, rotation, 0.0);
  }
  #[inline]
  pub fn add_is_commandable(&mut self, is_commandable: bool) {
    self.fbb_.push_slot::<bool>(EntityUpdate::VT_IS_COMMANDABLE, is_commandable, false);
  }
  #[inline]
  pub fn add_block_hit_updates(&mut self, block_hit_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BlockHitUpdate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EntityUpdate::VT_BLOCK_HIT_UPDATES, block_hit_updates);
  }
  #[inline]
  pub fn add_thruster_updates(&mut self, thruster_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ThrusterUpdate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EntityUpdate::VT_THRUSTER_UPDATES, thruster_updates);
  }
  #[inline]
  pub fn add_shield_updates(&mut self, shield_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ShieldUpdate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EntityUpdate::VT_SHIELD_UPDATES, shield_updates);
  }
  #[inline]
  pub fn add_missile_slot_updates(&mut self, missile_slot_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MissileSlotUpdate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EntityUpdate::VT_MISSILE_SLOT_UPDATES, missile_slot_updates);
  }
  #[inline]
  pub fn add_turret_updates(&mut self, turret_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TurretUpdate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EntityUpdate::VT_TURRET_UPDATES, turret_updates);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EntityUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EntityUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EntityUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EntityUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EntityUpdate");
      ds.field("id", &self.id());
      ds.field("position", &self.position());
      ds.field("linear_velocity", &self.linear_velocity());
      ds.field("rotation", &self.rotation());
      ds.field("is_commandable", &self.is_commandable());
      ds.field("block_hit_updates", &self.block_hit_updates());
      ds.field("thruster_updates", &self.thruster_updates());
      ds.field("shield_updates", &self.shield_updates());
      ds.field("missile_slot_updates", &self.missile_slot_updates());
      ds.field("turret_updates", &self.turret_updates());
      ds.finish()
  }
}
pub enum GameStateDeltaOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GameStateDelta<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GameStateDelta<'a> {
  type Inner = GameStateDelta<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GameStateDelta<'a> {
  pub const VT_FLAG_UPDATES: flatbuffers::VOffsetT = 4;
  pub const VT_NEW_ENTITIES: flatbuffers::VOffsetT = 6;
  pub const VT_ENTITY_UPDATES: flatbuffers::VOffsetT = 8;
  pub const VT_DEAD_ENTITIES: flatbuffers::VOffsetT = 10;
  pub const VT_NEW_PROJECTILES: flatbuffers::VOffsetT = 12;
  pub const VT_DEAD_PROJECTILES: flatbuffers::VOffsetT = 14;
  pub const VT_EXPLOSIONS: flatbuffers::VOffsetT = 16;
  pub const VT_MY_ID: flatbuffers::VOffsetT = 18;
  pub const VT_WINNER_ID: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GameStateDelta { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GameStateDeltaArgs<'args>
  ) -> flatbuffers::WIPOffset<GameStateDelta<'bldr>> {
    let mut builder = GameStateDeltaBuilder::new(_fbb);
    if let Some(x) = args.explosions { builder.add_explosions(x); }
    if let Some(x) = args.dead_projectiles { builder.add_dead_projectiles(x); }
    if let Some(x) = args.new_projectiles { builder.add_new_projectiles(x); }
    if let Some(x) = args.dead_entities { builder.add_dead_entities(x); }
    if let Some(x) = args.entity_updates { builder.add_entity_updates(x); }
    if let Some(x) = args.new_entities { builder.add_new_entities(x); }
    if let Some(x) = args.flag_updates { builder.add_flag_updates(x); }
    builder.add_winner_id(args.winner_id);
    builder.add_my_id(args.my_id);
    builder.finish()
  }


  #[inline]
  pub fn flag_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Flag<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Flag>>>>(GameStateDelta::VT_FLAG_UPDATES, None)}
  }
  #[inline]
  pub fn new_entities(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity>>>>(GameStateDelta::VT_NEW_ENTITIES, None)}
  }
  #[inline]
  pub fn entity_updates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EntityUpdate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EntityUpdate>>>>(GameStateDelta::VT_ENTITY_UPDATES, None)}
  }
  #[inline]
  pub fn dead_entities(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(GameStateDelta::VT_DEAD_ENTITIES, None)}
  }
  #[inline]
  pub fn new_projectiles(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Projectile<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Projectile>>>>(GameStateDelta::VT_NEW_PROJECTILES, None)}
  }
  #[inline]
  pub fn dead_projectiles(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeadProjectile<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeadProjectile>>>>(GameStateDelta::VT_DEAD_PROJECTILES, None)}
  }
  #[inline]
  pub fn explosions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Explosion<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Explosion>>>>(GameStateDelta::VT_EXPLOSIONS, None)}
  }
  #[inline]
  pub fn my_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(GameStateDelta::VT_MY_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn winner_id(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(GameStateDelta::VT_WINNER_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GameStateDelta<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Flag>>>>("flag_updates", Self::VT_FLAG_UPDATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Entity>>>>("new_entities", Self::VT_NEW_ENTITIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EntityUpdate>>>>("entity_updates", Self::VT_ENTITY_UPDATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("dead_entities", Self::VT_DEAD_ENTITIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Projectile>>>>("new_projectiles", Self::VT_NEW_PROJECTILES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<DeadProjectile>>>>("dead_projectiles", Self::VT_DEAD_PROJECTILES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Explosion>>>>("explosions", Self::VT_EXPLOSIONS, false)?
     .visit_field::<u8>("my_id", Self::VT_MY_ID, false)?
     .visit_field::<u8>("winner_id", Self::VT_WINNER_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct GameStateDeltaArgs<'a> {
    pub flag_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Flag<'a>>>>>,
    pub new_entities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Entity<'a>>>>>,
    pub entity_updates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EntityUpdate<'a>>>>>,
    pub dead_entities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub new_projectiles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Projectile<'a>>>>>,
    pub dead_projectiles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeadProjectile<'a>>>>>,
    pub explosions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Explosion<'a>>>>>,
    pub my_id: u8,
    pub winner_id: u8,
}
impl<'a> Default for GameStateDeltaArgs<'a> {
  #[inline]
  fn default() -> Self {
    GameStateDeltaArgs {
      flag_updates: None,
      new_entities: None,
      entity_updates: None,
      dead_entities: None,
      new_projectiles: None,
      dead_projectiles: None,
      explosions: None,
      my_id: 0,
      winner_id: 0,
    }
  }
}

pub struct GameStateDeltaBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GameStateDeltaBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_flag_updates(&mut self, flag_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Flag<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameStateDelta::VT_FLAG_UPDATES, flag_updates);
  }
  #[inline]
  pub fn add_new_entities(&mut self, new_entities: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Entity<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameStateDelta::VT_NEW_ENTITIES, new_entities);
  }
  #[inline]
  pub fn add_entity_updates(&mut self, entity_updates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<EntityUpdate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameStateDelta::VT_ENTITY_UPDATES, entity_updates);
  }
  #[inline]
  pub fn add_dead_entities(&mut self, dead_entities: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameStateDelta::VT_DEAD_ENTITIES, dead_entities);
  }
  #[inline]
  pub fn add_new_projectiles(&mut self, new_projectiles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Projectile<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameStateDelta::VT_NEW_PROJECTILES, new_projectiles);
  }
  #[inline]
  pub fn add_dead_projectiles(&mut self, dead_projectiles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<DeadProjectile<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameStateDelta::VT_DEAD_PROJECTILES, dead_projectiles);
  }
  #[inline]
  pub fn add_explosions(&mut self, explosions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Explosion<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GameStateDelta::VT_EXPLOSIONS, explosions);
  }
  #[inline]
  pub fn add_my_id(&mut self, my_id: u8) {
    self.fbb_.push_slot::<u8>(GameStateDelta::VT_MY_ID, my_id, 0);
  }
  #[inline]
  pub fn add_winner_id(&mut self, winner_id: u8) {
    self.fbb_.push_slot::<u8>(GameStateDelta::VT_WINNER_ID, winner_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GameStateDeltaBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GameStateDeltaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GameStateDelta<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GameStateDelta<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GameStateDelta");
      ds.field("flag_updates", &self.flag_updates());
      ds.field("new_entities", &self.new_entities());
      ds.field("entity_updates", &self.entity_updates());
      ds.field("dead_entities", &self.dead_entities());
      ds.field("new_projectiles", &self.new_projectiles());
      ds.field("dead_projectiles", &self.dead_projectiles());
      ds.field("explosions", &self.explosions());
      ds.field("my_id", &self.my_id());
      ds.field("winner_id", &self.winner_id());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `GameState`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_game_state_unchecked`.
pub fn root_as_game_state(buf: &[u8]) -> Result<GameState, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<GameState>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `GameState` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_game_state_unchecked`.
pub fn size_prefixed_root_as_game_state(buf: &[u8]) -> Result<GameState, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<GameState>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `GameState` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_game_state_unchecked`.
pub fn root_as_game_state_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GameState<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<GameState<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `GameState` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_game_state_unchecked`.
pub fn size_prefixed_root_as_game_state_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GameState<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<GameState<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a GameState and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `GameState`.
pub unsafe fn root_as_game_state_unchecked(buf: &[u8]) -> GameState {
  flatbuffers::root_unchecked::<GameState>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed GameState and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `GameState`.
pub unsafe fn size_prefixed_root_as_game_state_unchecked(buf: &[u8]) -> GameState {
  flatbuffers::size_prefixed_root_unchecked::<GameState>(buf)
}
#[inline]
pub fn finish_game_state_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<GameState<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_game_state_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<GameState<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
