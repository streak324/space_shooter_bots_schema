#ifndef GAME_STATE_BUILDER_H
#define GAME_STATE_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef GAME_STATE_READER_H
#include "game_state_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __Vec2_formal_args , float v0, float v1
#define __Vec2_call_args , v0, v1
static inline Vec2_t *Vec2_assign(Vec2_t *p, float v0, float v1)
{ p->x = v0; p->y = v1;
  return p; }
static inline Vec2_t *Vec2_copy(Vec2_t *p, const Vec2_t *p2)
{ p->x = p2->x; p->y = p2->y;
  return p; }
static inline Vec2_t *Vec2_assign_to_pe(Vec2_t *p, float v0, float v1)
{ flatbuffers_float_assign_to_pe(&p->x, v0); flatbuffers_float_assign_to_pe(&p->y, v1);
  return p; }
static inline Vec2_t *Vec2_copy_to_pe(Vec2_t *p, const Vec2_t *p2)
{ flatbuffers_float_copy_to_pe(&p->x, &p2->x); flatbuffers_float_copy_to_pe(&p->y, &p2->y);
  return p; }
static inline Vec2_t *Vec2_assign_from_pe(Vec2_t *p, float v0, float v1)
{ flatbuffers_float_assign_from_pe(&p->x, v0); flatbuffers_float_assign_from_pe(&p->y, v1);
  return p; }
static inline Vec2_t *Vec2_copy_from_pe(Vec2_t *p, const Vec2_t *p2)
{ flatbuffers_float_copy_from_pe(&p->x, &p2->x); flatbuffers_float_copy_from_pe(&p->y, &p2->y);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Vec2, 8, 4, Vec2_file_identifier, Vec2_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Vec2, Vec2_t)

#define __BlockHitUpdate_formal_args , uint16_t v0, float v1, flatbuffers_bool_t v2
#define __BlockHitUpdate_call_args , v0, v1, v2
static inline BlockHitUpdate_t *BlockHitUpdate_assign(BlockHitUpdate_t *p, uint16_t v0, float v1, flatbuffers_bool_t v2)
{ p->block_index = v0; p->hitpoints = v1; p->is_destroyed = v2;
  return p; }
static inline BlockHitUpdate_t *BlockHitUpdate_copy(BlockHitUpdate_t *p, const BlockHitUpdate_t *p2)
{ p->block_index = p2->block_index; p->hitpoints = p2->hitpoints; p->is_destroyed = p2->is_destroyed;
  return p; }
static inline BlockHitUpdate_t *BlockHitUpdate_assign_to_pe(BlockHitUpdate_t *p, uint16_t v0, float v1, flatbuffers_bool_t v2)
{ flatbuffers_uint16_assign_to_pe(&p->block_index, v0); flatbuffers_float_assign_to_pe(&p->hitpoints, v1); p->is_destroyed = v2;
  return p; }
static inline BlockHitUpdate_t *BlockHitUpdate_copy_to_pe(BlockHitUpdate_t *p, const BlockHitUpdate_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_to_pe(&p->hitpoints, &p2->hitpoints); p->is_destroyed = p2->is_destroyed;
  return p; }
static inline BlockHitUpdate_t *BlockHitUpdate_assign_from_pe(BlockHitUpdate_t *p, uint16_t v0, float v1, flatbuffers_bool_t v2)
{ flatbuffers_uint16_assign_from_pe(&p->block_index, v0); flatbuffers_float_assign_from_pe(&p->hitpoints, v1); p->is_destroyed = v2;
  return p; }
static inline BlockHitUpdate_t *BlockHitUpdate_copy_from_pe(BlockHitUpdate_t *p, const BlockHitUpdate_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_from_pe(&p->hitpoints, &p2->hitpoints); p->is_destroyed = p2->is_destroyed;
  return p; }
__flatbuffers_build_struct(flatbuffers_, BlockHitUpdate, 12, 4, BlockHitUpdate_file_identifier, BlockHitUpdate_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, BlockHitUpdate, BlockHitUpdate_t)

#define __ThrusterUpdate_formal_args , uint16_t v0, float v1
#define __ThrusterUpdate_call_args , v0, v1
static inline ThrusterUpdate_t *ThrusterUpdate_assign(ThrusterUpdate_t *p, uint16_t v0, float v1)
{ p->block_index = v0; p->applied_thrust = v1;
  return p; }
static inline ThrusterUpdate_t *ThrusterUpdate_copy(ThrusterUpdate_t *p, const ThrusterUpdate_t *p2)
{ p->block_index = p2->block_index; p->applied_thrust = p2->applied_thrust;
  return p; }
static inline ThrusterUpdate_t *ThrusterUpdate_assign_to_pe(ThrusterUpdate_t *p, uint16_t v0, float v1)
{ flatbuffers_uint16_assign_to_pe(&p->block_index, v0); flatbuffers_float_assign_to_pe(&p->applied_thrust, v1);
  return p; }
static inline ThrusterUpdate_t *ThrusterUpdate_copy_to_pe(ThrusterUpdate_t *p, const ThrusterUpdate_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_to_pe(&p->applied_thrust, &p2->applied_thrust);
  return p; }
static inline ThrusterUpdate_t *ThrusterUpdate_assign_from_pe(ThrusterUpdate_t *p, uint16_t v0, float v1)
{ flatbuffers_uint16_assign_from_pe(&p->block_index, v0); flatbuffers_float_assign_from_pe(&p->applied_thrust, v1);
  return p; }
static inline ThrusterUpdate_t *ThrusterUpdate_copy_from_pe(ThrusterUpdate_t *p, const ThrusterUpdate_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_from_pe(&p->applied_thrust, &p2->applied_thrust);
  return p; }
__flatbuffers_build_struct(flatbuffers_, ThrusterUpdate, 8, 4, ThrusterUpdate_file_identifier, ThrusterUpdate_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, ThrusterUpdate, ThrusterUpdate_t)

#define __ShieldUpdate_formal_args , uint16_t v0, float v1, flatbuffers_bool_t v2
#define __ShieldUpdate_call_args , v0, v1, v2
static inline ShieldUpdate_t *ShieldUpdate_assign(ShieldUpdate_t *p, uint16_t v0, float v1, flatbuffers_bool_t v2)
{ p->block_index = v0; p->hitpoints = v1; p->is_destroyed = v2;
  return p; }
static inline ShieldUpdate_t *ShieldUpdate_copy(ShieldUpdate_t *p, const ShieldUpdate_t *p2)
{ p->block_index = p2->block_index; p->hitpoints = p2->hitpoints; p->is_destroyed = p2->is_destroyed;
  return p; }
static inline ShieldUpdate_t *ShieldUpdate_assign_to_pe(ShieldUpdate_t *p, uint16_t v0, float v1, flatbuffers_bool_t v2)
{ flatbuffers_uint16_assign_to_pe(&p->block_index, v0); flatbuffers_float_assign_to_pe(&p->hitpoints, v1); p->is_destroyed = v2;
  return p; }
static inline ShieldUpdate_t *ShieldUpdate_copy_to_pe(ShieldUpdate_t *p, const ShieldUpdate_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_to_pe(&p->hitpoints, &p2->hitpoints); p->is_destroyed = p2->is_destroyed;
  return p; }
static inline ShieldUpdate_t *ShieldUpdate_assign_from_pe(ShieldUpdate_t *p, uint16_t v0, float v1, flatbuffers_bool_t v2)
{ flatbuffers_uint16_assign_from_pe(&p->block_index, v0); flatbuffers_float_assign_from_pe(&p->hitpoints, v1); p->is_destroyed = v2;
  return p; }
static inline ShieldUpdate_t *ShieldUpdate_copy_from_pe(ShieldUpdate_t *p, const ShieldUpdate_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_from_pe(&p->hitpoints, &p2->hitpoints); p->is_destroyed = p2->is_destroyed;
  return p; }
__flatbuffers_build_struct(flatbuffers_, ShieldUpdate, 12, 4, ShieldUpdate_file_identifier, ShieldUpdate_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, ShieldUpdate, ShieldUpdate_t)

#define __MissileSlotUpdate_formal_args , uint16_t v0, uint8_t v1, flatbuffers_bool_t v2, float v3
#define __MissileSlotUpdate_call_args , v0, v1, v2, v3
static inline MissileSlotUpdate_t *MissileSlotUpdate_assign(MissileSlotUpdate_t *p, uint16_t v0, uint8_t v1, flatbuffers_bool_t v2, float v3)
{ p->block_index = v0; p->slot_index = v1; p->is_loaded = v2; p->local_rotation = v3;
  return p; }
static inline MissileSlotUpdate_t *MissileSlotUpdate_copy(MissileSlotUpdate_t *p, const MissileSlotUpdate_t *p2)
{ p->block_index = p2->block_index; p->slot_index = p2->slot_index; p->is_loaded = p2->is_loaded; p->local_rotation = p2->local_rotation;
  return p; }
static inline MissileSlotUpdate_t *MissileSlotUpdate_assign_to_pe(MissileSlotUpdate_t *p, uint16_t v0, uint8_t v1, flatbuffers_bool_t v2, float v3)
{ flatbuffers_uint16_assign_to_pe(&p->block_index, v0); p->slot_index = v1; p->is_loaded = v2; flatbuffers_float_assign_to_pe(&p->local_rotation, v3);
  return p; }
static inline MissileSlotUpdate_t *MissileSlotUpdate_copy_to_pe(MissileSlotUpdate_t *p, const MissileSlotUpdate_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->block_index, &p2->block_index); p->slot_index = p2->slot_index; p->is_loaded = p2->is_loaded; flatbuffers_float_copy_to_pe(&p->local_rotation, &p2->local_rotation);
  return p; }
static inline MissileSlotUpdate_t *MissileSlotUpdate_assign_from_pe(MissileSlotUpdate_t *p, uint16_t v0, uint8_t v1, flatbuffers_bool_t v2, float v3)
{ flatbuffers_uint16_assign_from_pe(&p->block_index, v0); p->slot_index = v1; p->is_loaded = v2; flatbuffers_float_assign_from_pe(&p->local_rotation, v3);
  return p; }
static inline MissileSlotUpdate_t *MissileSlotUpdate_copy_from_pe(MissileSlotUpdate_t *p, const MissileSlotUpdate_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->block_index, &p2->block_index); p->slot_index = p2->slot_index; p->is_loaded = p2->is_loaded; flatbuffers_float_copy_from_pe(&p->local_rotation, &p2->local_rotation);
  return p; }
__flatbuffers_build_struct(flatbuffers_, MissileSlotUpdate, 8, 4, MissileSlotUpdate_file_identifier, MissileSlotUpdate_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, MissileSlotUpdate, MissileSlotUpdate_t)

#define __TurretUpdate_formal_args , uint16_t v0, float v1
#define __TurretUpdate_call_args , v0, v1
static inline TurretUpdate_t *TurretUpdate_assign(TurretUpdate_t *p, uint16_t v0, float v1)
{ p->block_index = v0; p->local_rotation = v1;
  return p; }
static inline TurretUpdate_t *TurretUpdate_copy(TurretUpdate_t *p, const TurretUpdate_t *p2)
{ p->block_index = p2->block_index; p->local_rotation = p2->local_rotation;
  return p; }
static inline TurretUpdate_t *TurretUpdate_assign_to_pe(TurretUpdate_t *p, uint16_t v0, float v1)
{ flatbuffers_uint16_assign_to_pe(&p->block_index, v0); flatbuffers_float_assign_to_pe(&p->local_rotation, v1);
  return p; }
static inline TurretUpdate_t *TurretUpdate_copy_to_pe(TurretUpdate_t *p, const TurretUpdate_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_to_pe(&p->local_rotation, &p2->local_rotation);
  return p; }
static inline TurretUpdate_t *TurretUpdate_assign_from_pe(TurretUpdate_t *p, uint16_t v0, float v1)
{ flatbuffers_uint16_assign_from_pe(&p->block_index, v0); flatbuffers_float_assign_from_pe(&p->local_rotation, v1);
  return p; }
static inline TurretUpdate_t *TurretUpdate_copy_from_pe(TurretUpdate_t *p, const TurretUpdate_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->block_index, &p2->block_index); flatbuffers_float_copy_from_pe(&p->local_rotation, &p2->local_rotation);
  return p; }
__flatbuffers_build_struct(flatbuffers_, TurretUpdate, 8, 4, TurretUpdate_file_identifier, TurretUpdate_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, TurretUpdate, TurretUpdate_t)

typedef flatbuffers_union_ref_t ArenaBounds_union_ref_t;
typedef flatbuffers_union_vec_ref_t ArenaBounds_union_vec_ref_t;
static ArenaBounds_union_ref_t ArenaBounds_clone(flatbuffers_builder_t *B, ArenaBounds_union_t t);

static const flatbuffers_voffset_t __MissileSlot_required[] = { 0 };
typedef flatbuffers_ref_t MissileSlot_ref_t;
static MissileSlot_ref_t MissileSlot_clone(flatbuffers_builder_t *B, MissileSlot_table_t t);
__flatbuffers_build_table(flatbuffers_, MissileSlot, 5)

static const flatbuffers_voffset_t __Shield_required[] = { 0 };
typedef flatbuffers_ref_t Shield_ref_t;
static Shield_ref_t Shield_clone(flatbuffers_builder_t *B, Shield_table_t t);
__flatbuffers_build_table(flatbuffers_, Shield, 3)

static const flatbuffers_voffset_t __Block_required[] = { 0 };
typedef flatbuffers_ref_t Block_ref_t;
static Block_ref_t Block_clone(flatbuffers_builder_t *B, Block_table_t t);
__flatbuffers_build_table(flatbuffers_, Block, 11)

static const flatbuffers_voffset_t __Explosion_required[] = { 0 };
typedef flatbuffers_ref_t Explosion_ref_t;
static Explosion_ref_t Explosion_clone(flatbuffers_builder_t *B, Explosion_table_t t);
__flatbuffers_build_table(flatbuffers_, Explosion, 4)

static const flatbuffers_voffset_t __Entity_required[] = { 0 };
typedef flatbuffers_ref_t Entity_ref_t;
static Entity_ref_t Entity_clone(flatbuffers_builder_t *B, Entity_table_t t);
__flatbuffers_build_table(flatbuffers_, Entity, 8)

static const flatbuffers_voffset_t __Projectile_required[] = { 0 };
typedef flatbuffers_ref_t Projectile_ref_t;
static Projectile_ref_t Projectile_clone(flatbuffers_builder_t *B, Projectile_table_t t);
__flatbuffers_build_table(flatbuffers_, Projectile, 7)

static const flatbuffers_voffset_t __DeadProjectile_required[] = { 0 };
typedef flatbuffers_ref_t DeadProjectile_ref_t;
static DeadProjectile_ref_t DeadProjectile_clone(flatbuffers_builder_t *B, DeadProjectile_table_t t);
__flatbuffers_build_table(flatbuffers_, DeadProjectile, 2)

static const flatbuffers_voffset_t __Flag_required[] = { 0 };
typedef flatbuffers_ref_t Flag_ref_t;
static Flag_ref_t Flag_clone(flatbuffers_builder_t *B, Flag_table_t t);
__flatbuffers_build_table(flatbuffers_, Flag, 5)

static const flatbuffers_voffset_t __EntityUpdate_required[] = { 0 };
typedef flatbuffers_ref_t EntityUpdate_ref_t;
static EntityUpdate_ref_t EntityUpdate_clone(flatbuffers_builder_t *B, EntityUpdate_table_t t);
__flatbuffers_build_table(flatbuffers_, EntityUpdate, 10)

static const flatbuffers_voffset_t __SingleBlockEntityUpdate_required[] = { 0 };
typedef flatbuffers_ref_t SingleBlockEntityUpdate_ref_t;
static SingleBlockEntityUpdate_ref_t SingleBlockEntityUpdate_clone(flatbuffers_builder_t *B, SingleBlockEntityUpdate_table_t t);
__flatbuffers_build_table(flatbuffers_, SingleBlockEntityUpdate, 7)

static const flatbuffers_voffset_t __RegularConvexPolygon_required[] = { 0 };
typedef flatbuffers_ref_t RegularConvexPolygon_ref_t;
static RegularConvexPolygon_ref_t RegularConvexPolygon_clone(flatbuffers_builder_t *B, RegularConvexPolygon_table_t t);
__flatbuffers_build_table(flatbuffers_, RegularConvexPolygon, 2)

static const flatbuffers_voffset_t __GameStartingParams_required[] = { 0 };
typedef flatbuffers_ref_t GameStartingParams_ref_t;
static GameStartingParams_ref_t GameStartingParams_clone(flatbuffers_builder_t *B, GameStartingParams_table_t t);
__flatbuffers_build_table(flatbuffers_, GameStartingParams, 6)

static const flatbuffers_voffset_t __GameStateDelta_required[] = { 0 };
typedef flatbuffers_ref_t GameStateDelta_ref_t;
static GameStateDelta_ref_t GameStateDelta_clone(flatbuffers_builder_t *B, GameStateDelta_table_t t);
__flatbuffers_build_table(flatbuffers_, GameStateDelta, 8)

static const flatbuffers_voffset_t __EndGame_required[] = { 0 };
typedef flatbuffers_ref_t EndGame_ref_t;
static EndGame_ref_t EndGame_clone(flatbuffers_builder_t *B, EndGame_table_t t);
__flatbuffers_build_table(flatbuffers_, EndGame, 1)

static const flatbuffers_voffset_t __Points_required[] = { 0 };
typedef flatbuffers_ref_t Points_ref_t;
static Points_ref_t Points_clone(flatbuffers_builder_t *B, Points_table_t t);
__flatbuffers_build_table(flatbuffers_, Points, 1)

#define __MissileSlot_formal_args ,\
  flatbuffers_bool_t v0, float v1, float v2, float v3, float v4
#define __MissileSlot_call_args ,\
  v0, v1, v2, v3, v4
static inline MissileSlot_ref_t MissileSlot_create(flatbuffers_builder_t *B __MissileSlot_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, MissileSlot, MissileSlot_file_identifier, MissileSlot_type_identifier)

#define __Shield_formal_args , flatbuffers_bool_t v0, float v1, float v2
#define __Shield_call_args , v0, v1, v2
static inline Shield_ref_t Shield_create(flatbuffers_builder_t *B __Shield_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Shield, Shield_file_identifier, Shield_type_identifier)

#define __Block_formal_args ,\
  uint32_t v0, uint64_t v1, float v2, float v3,\
  float v4, float v5, float v6, flatbuffers_bool_t v7,\
  MissileSlot_vec_ref_t v8, float v9, Shield_ref_t v10
#define __Block_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10
static inline Block_ref_t Block_create(flatbuffers_builder_t *B __Block_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Block, Block_file_identifier, Block_type_identifier)

#define __Explosion_formal_args , float v0, float v1, float v2, float v3
#define __Explosion_call_args , v0, v1, v2, v3
static inline Explosion_ref_t Explosion_create(flatbuffers_builder_t *B __Explosion_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Explosion, Explosion_file_identifier, Explosion_type_identifier)

#define __Entity_formal_args ,\
  uint64_t v0, uint8_t v1, flatbuffers_bool_t v2, Vec2_t *v3,\
  Vec2_t *v4, float v5, float v6, Block_vec_ref_t v7
#define __Entity_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7
static inline Entity_ref_t Entity_create(flatbuffers_builder_t *B __Entity_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Entity, Entity_file_identifier, Entity_type_identifier)

#define __Projectile_formal_args ,\
  uint64_t v0, uint8_t v1, Vec2_t *v2, Vec2_t *v3,\
  float v4, float v5, float v6
#define __Projectile_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline Projectile_ref_t Projectile_create(flatbuffers_builder_t *B __Projectile_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Projectile, Projectile_file_identifier, Projectile_type_identifier)

#define __DeadProjectile_formal_args , uint64_t v0, Vec2_t *v1
#define __DeadProjectile_call_args , v0, v1
static inline DeadProjectile_ref_t DeadProjectile_create(flatbuffers_builder_t *B __DeadProjectile_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, DeadProjectile, DeadProjectile_file_identifier, DeadProjectile_type_identifier)

#define __Flag_formal_args ,\
  uint8_t v0, float v1, float v2, flatbuffers_bool_t v3, uint64_t v4
#define __Flag_call_args ,\
  v0, v1, v2, v3, v4
static inline Flag_ref_t Flag_create(flatbuffers_builder_t *B __Flag_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Flag, Flag_file_identifier, Flag_type_identifier)

#define __EntityUpdate_formal_args ,\
  uint64_t v0, Vec2_t *v1, Vec2_t *v2, float v3,\
  flatbuffers_bool_t v4, BlockHitUpdate_vec_ref_t v5, ThrusterUpdate_vec_ref_t v6, ShieldUpdate_vec_ref_t v7, MissileSlotUpdate_vec_ref_t v8, TurretUpdate_vec_ref_t v9
#define __EntityUpdate_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7, v8, v9
static inline EntityUpdate_ref_t EntityUpdate_create(flatbuffers_builder_t *B __EntityUpdate_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, EntityUpdate, EntityUpdate_file_identifier, EntityUpdate_type_identifier)

#define __SingleBlockEntityUpdate_formal_args ,\
  uint64_t v0, Vec2_t *v1, Vec2_t *v2, float v3,\
  float v4, float v5, float v6
#define __SingleBlockEntityUpdate_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline SingleBlockEntityUpdate_ref_t SingleBlockEntityUpdate_create(flatbuffers_builder_t *B __SingleBlockEntityUpdate_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, SingleBlockEntityUpdate, SingleBlockEntityUpdate_file_identifier, SingleBlockEntityUpdate_type_identifier)

#define __RegularConvexPolygon_formal_args , float v0, uint32_t v1
#define __RegularConvexPolygon_call_args , v0, v1
static inline RegularConvexPolygon_ref_t RegularConvexPolygon_create(flatbuffers_builder_t *B __RegularConvexPolygon_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, RegularConvexPolygon, RegularConvexPolygon_file_identifier, RegularConvexPolygon_type_identifier)

#define __GameStartingParams_formal_args ,\
  uint8_t v0, uint64_t v1, uint64_t v2, ArenaBounds_union_ref_t v4, uint64_t v5
#define __GameStartingParams_call_args ,\
  v0, v1, v2, v4, v5
static inline GameStartingParams_ref_t GameStartingParams_create(flatbuffers_builder_t *B __GameStartingParams_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, GameStartingParams, GameStartingParams_file_identifier, GameStartingParams_type_identifier)

#define __GameStateDelta_formal_args ,\
  Flag_vec_ref_t v0, Entity_vec_ref_t v1, EntityUpdate_vec_ref_t v2, SingleBlockEntityUpdate_vec_ref_t v3,\
  flatbuffers_uint64_vec_ref_t v4, Projectile_vec_ref_t v5, DeadProjectile_vec_ref_t v6, Explosion_vec_ref_t v7
#define __GameStateDelta_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7
static inline GameStateDelta_ref_t GameStateDelta_create(flatbuffers_builder_t *B __GameStateDelta_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, GameStateDelta, GameStateDelta_file_identifier, GameStateDelta_type_identifier)

#define __EndGame_formal_args , uint8_t v0
#define __EndGame_call_args , v0
static inline EndGame_ref_t EndGame_create(flatbuffers_builder_t *B __EndGame_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, EndGame, EndGame_file_identifier, EndGame_type_identifier)

#define __Points_formal_args , Vec2_vec_ref_t v0
#define __Points_call_args , v0
static inline Points_ref_t Points_create(flatbuffers_builder_t *B __Points_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Points, Points_file_identifier, Points_type_identifier)

static inline ArenaBounds_union_ref_t ArenaBounds_as_NONE(void)
{ ArenaBounds_union_ref_t uref; uref.type = ArenaBounds_NONE; uref.value = 0; return uref; }
static inline ArenaBounds_union_ref_t ArenaBounds_as_regular_convex_polygon(RegularConvexPolygon_ref_t ref)
{ ArenaBounds_union_ref_t uref; uref.type = ArenaBounds_regular_convex_polygon; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, ArenaBounds)

static ArenaBounds_union_ref_t ArenaBounds_clone(flatbuffers_builder_t *B, ArenaBounds_union_t u)
{
    switch (u.type) {
    case 1: return ArenaBounds_as_regular_convex_polygon(RegularConvexPolygon_clone(B, (RegularConvexPolygon_table_t)u.value));
    default: return ArenaBounds_as_NONE();
    }
}

__flatbuffers_build_scalar_field(0, flatbuffers_, MissileSlot_is_loaded, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), MissileSlot)
__flatbuffers_build_scalar_field(1, flatbuffers_, MissileSlot_reload_timer, flatbuffers_float, float, 4, 4, 0.00000000f, MissileSlot)
__flatbuffers_build_scalar_field(2, flatbuffers_, MissileSlot_x, flatbuffers_float, float, 4, 4, 0.00000000f, MissileSlot)
__flatbuffers_build_scalar_field(3, flatbuffers_, MissileSlot_y, flatbuffers_float, float, 4, 4, 0.00000000f, MissileSlot)
__flatbuffers_build_scalar_field(4, flatbuffers_, MissileSlot_local_rotation, flatbuffers_float, float, 4, 4, 0.00000000f, MissileSlot)

static inline MissileSlot_ref_t MissileSlot_create(flatbuffers_builder_t *B __MissileSlot_formal_args)
{
    if (MissileSlot_start(B)
        || MissileSlot_reload_timer_add(B, v1)
        || MissileSlot_x_add(B, v2)
        || MissileSlot_y_add(B, v3)
        || MissileSlot_local_rotation_add(B, v4)
        || MissileSlot_is_loaded_add(B, v0)) {
        return 0;
    }
    return MissileSlot_end(B);
}

static MissileSlot_ref_t MissileSlot_clone(flatbuffers_builder_t *B, MissileSlot_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (MissileSlot_start(B)
        || MissileSlot_reload_timer_pick(B, t)
        || MissileSlot_x_pick(B, t)
        || MissileSlot_y_pick(B, t)
        || MissileSlot_local_rotation_pick(B, t)
        || MissileSlot_is_loaded_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, MissileSlot_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Shield_is_destroyed, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Shield)
__flatbuffers_build_scalar_field(1, flatbuffers_, Shield_hitpoints, flatbuffers_float, float, 4, 4, 0.00000000f, Shield)
__flatbuffers_build_scalar_field(2, flatbuffers_, Shield_radius, flatbuffers_float, float, 4, 4, 0.00000000f, Shield)

static inline Shield_ref_t Shield_create(flatbuffers_builder_t *B __Shield_formal_args)
{
    if (Shield_start(B)
        || Shield_hitpoints_add(B, v1)
        || Shield_radius_add(B, v2)
        || Shield_is_destroyed_add(B, v0)) {
        return 0;
    }
    return Shield_end(B);
}

static Shield_ref_t Shield_clone(flatbuffers_builder_t *B, Shield_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Shield_start(B)
        || Shield_hitpoints_pick(B, t)
        || Shield_radius_pick(B, t)
        || Shield_is_destroyed_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Shield_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Block_block_type, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), Block)
__flatbuffers_build_scalar_field(1, flatbuffers_, Block_feature_flags, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Block)
__flatbuffers_build_scalar_field(2, flatbuffers_, Block_x, flatbuffers_float, float, 4, 4, 0.00000000f, Block)
__flatbuffers_build_scalar_field(3, flatbuffers_, Block_y, flatbuffers_float, float, 4, 4, 0.00000000f, Block)
__flatbuffers_build_scalar_field(4, flatbuffers_, Block_rotation, flatbuffers_float, float, 4, 4, 0.00000000f, Block)
__flatbuffers_build_scalar_field(5, flatbuffers_, Block_hitpoints, flatbuffers_float, float, 4, 4, 0.00000000f, Block)
__flatbuffers_build_scalar_field(6, flatbuffers_, Block_applied_thrust, flatbuffers_float, float, 4, 4, 0.00000000f, Block)
__flatbuffers_build_scalar_field(7, flatbuffers_, Block_is_destroyed, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Block)
__flatbuffers_build_table_vector_field(8, flatbuffers_, Block_missile_slots, MissileSlot, Block)
__flatbuffers_build_scalar_field(9, flatbuffers_, Block_local_turret_rotation, flatbuffers_float, float, 4, 4, 0.00000000f, Block)
__flatbuffers_build_table_field(10, flatbuffers_, Block_shield, Shield, Block)

static inline Block_ref_t Block_create(flatbuffers_builder_t *B __Block_formal_args)
{
    if (Block_start(B)
        || Block_feature_flags_add(B, v1)
        || Block_block_type_add(B, v0)
        || Block_x_add(B, v2)
        || Block_y_add(B, v3)
        || Block_rotation_add(B, v4)
        || Block_hitpoints_add(B, v5)
        || Block_applied_thrust_add(B, v6)
        || Block_missile_slots_add(B, v8)
        || Block_local_turret_rotation_add(B, v9)
        || Block_shield_add(B, v10)
        || Block_is_destroyed_add(B, v7)) {
        return 0;
    }
    return Block_end(B);
}

static Block_ref_t Block_clone(flatbuffers_builder_t *B, Block_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Block_start(B)
        || Block_feature_flags_pick(B, t)
        || Block_block_type_pick(B, t)
        || Block_x_pick(B, t)
        || Block_y_pick(B, t)
        || Block_rotation_pick(B, t)
        || Block_hitpoints_pick(B, t)
        || Block_applied_thrust_pick(B, t)
        || Block_missile_slots_pick(B, t)
        || Block_local_turret_rotation_pick(B, t)
        || Block_shield_pick(B, t)
        || Block_is_destroyed_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Block_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Explosion_x, flatbuffers_float, float, 4, 4, 0.00000000f, Explosion)
__flatbuffers_build_scalar_field(1, flatbuffers_, Explosion_y, flatbuffers_float, float, 4, 4, 0.00000000f, Explosion)
__flatbuffers_build_scalar_field(2, flatbuffers_, Explosion_radius, flatbuffers_float, float, 4, 4, 0.00000000f, Explosion)
__flatbuffers_build_scalar_field(3, flatbuffers_, Explosion_damage, flatbuffers_float, float, 4, 4, 0.00000000f, Explosion)

static inline Explosion_ref_t Explosion_create(flatbuffers_builder_t *B __Explosion_formal_args)
{
    if (Explosion_start(B)
        || Explosion_x_add(B, v0)
        || Explosion_y_add(B, v1)
        || Explosion_radius_add(B, v2)
        || Explosion_damage_add(B, v3)) {
        return 0;
    }
    return Explosion_end(B);
}

static Explosion_ref_t Explosion_clone(flatbuffers_builder_t *B, Explosion_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Explosion_start(B)
        || Explosion_x_pick(B, t)
        || Explosion_y_pick(B, t)
        || Explosion_radius_pick(B, t)
        || Explosion_damage_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Explosion_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Entity_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Entity)
__flatbuffers_build_scalar_field(1, flatbuffers_, Entity_owner_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), Entity)
__flatbuffers_build_scalar_field(2, flatbuffers_, Entity_is_commandable, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Entity)
__flatbuffers_build_struct_field(3, flatbuffers_, Entity_position, Vec2, 8, 4, Entity)
__flatbuffers_build_struct_field(4, flatbuffers_, Entity_linear_velocity, Vec2, 8, 4, Entity)
__flatbuffers_build_scalar_field(5, flatbuffers_, Entity_rotation, flatbuffers_float, float, 4, 4, 0.00000000f, Entity)
__flatbuffers_build_scalar_field(6, flatbuffers_, Entity_angular_velocity, flatbuffers_float, float, 4, 4, 0.00000000f, Entity)
__flatbuffers_build_table_vector_field(7, flatbuffers_, Entity_blocks, Block, Entity)

static inline Entity_ref_t Entity_create(flatbuffers_builder_t *B __Entity_formal_args)
{
    if (Entity_start(B)
        || Entity_id_add(B, v0)
        || Entity_position_add(B, v3)
        || Entity_linear_velocity_add(B, v4)
        || Entity_rotation_add(B, v5)
        || Entity_angular_velocity_add(B, v6)
        || Entity_blocks_add(B, v7)
        || Entity_owner_id_add(B, v1)
        || Entity_is_commandable_add(B, v2)) {
        return 0;
    }
    return Entity_end(B);
}

static Entity_ref_t Entity_clone(flatbuffers_builder_t *B, Entity_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Entity_start(B)
        || Entity_id_pick(B, t)
        || Entity_position_pick(B, t)
        || Entity_linear_velocity_pick(B, t)
        || Entity_rotation_pick(B, t)
        || Entity_angular_velocity_pick(B, t)
        || Entity_blocks_pick(B, t)
        || Entity_owner_id_pick(B, t)
        || Entity_is_commandable_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Entity_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Projectile_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Projectile)
__flatbuffers_build_scalar_field(1, flatbuffers_, Projectile_owner_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), Projectile)
__flatbuffers_build_struct_field(2, flatbuffers_, Projectile_position, Vec2, 8, 4, Projectile)
__flatbuffers_build_struct_field(3, flatbuffers_, Projectile_linear_velocity, Vec2, 8, 4, Projectile)
__flatbuffers_build_scalar_field(4, flatbuffers_, Projectile_damage, flatbuffers_float, float, 4, 4, 0.00000000f, Projectile)
__flatbuffers_build_scalar_field(5, flatbuffers_, Projectile_size, flatbuffers_float, float, 4, 4, 0.00000000f, Projectile)
__flatbuffers_build_scalar_field(6, flatbuffers_, Projectile_range, flatbuffers_float, float, 4, 4, 0.00000000f, Projectile)

static inline Projectile_ref_t Projectile_create(flatbuffers_builder_t *B __Projectile_formal_args)
{
    if (Projectile_start(B)
        || Projectile_id_add(B, v0)
        || Projectile_position_add(B, v2)
        || Projectile_linear_velocity_add(B, v3)
        || Projectile_damage_add(B, v4)
        || Projectile_size_add(B, v5)
        || Projectile_range_add(B, v6)
        || Projectile_owner_id_add(B, v1)) {
        return 0;
    }
    return Projectile_end(B);
}

static Projectile_ref_t Projectile_clone(flatbuffers_builder_t *B, Projectile_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Projectile_start(B)
        || Projectile_id_pick(B, t)
        || Projectile_position_pick(B, t)
        || Projectile_linear_velocity_pick(B, t)
        || Projectile_damage_pick(B, t)
        || Projectile_size_pick(B, t)
        || Projectile_range_pick(B, t)
        || Projectile_owner_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Projectile_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, DeadProjectile_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), DeadProjectile)
__flatbuffers_build_struct_field(1, flatbuffers_, DeadProjectile_position, Vec2, 8, 4, DeadProjectile)

static inline DeadProjectile_ref_t DeadProjectile_create(flatbuffers_builder_t *B __DeadProjectile_formal_args)
{
    if (DeadProjectile_start(B)
        || DeadProjectile_id_add(B, v0)
        || DeadProjectile_position_add(B, v1)) {
        return 0;
    }
    return DeadProjectile_end(B);
}

static DeadProjectile_ref_t DeadProjectile_clone(flatbuffers_builder_t *B, DeadProjectile_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (DeadProjectile_start(B)
        || DeadProjectile_id_pick(B, t)
        || DeadProjectile_position_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, DeadProjectile_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Flag_owner_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), Flag)
__flatbuffers_build_scalar_field(1, flatbuffers_, Flag_x, flatbuffers_float, float, 4, 4, 0.00000000f, Flag)
__flatbuffers_build_scalar_field(2, flatbuffers_, Flag_y, flatbuffers_float, float, 4, 4, 0.00000000f, Flag)
__flatbuffers_build_scalar_field(3, flatbuffers_, Flag_is_carried, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), Flag)
__flatbuffers_build_scalar_field(4, flatbuffers_, Flag_carrier_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), Flag)

static inline Flag_ref_t Flag_create(flatbuffers_builder_t *B __Flag_formal_args)
{
    if (Flag_start(B)
        || Flag_carrier_id_add(B, v4)
        || Flag_x_add(B, v1)
        || Flag_y_add(B, v2)
        || Flag_owner_id_add(B, v0)
        || Flag_is_carried_add(B, v3)) {
        return 0;
    }
    return Flag_end(B);
}

static Flag_ref_t Flag_clone(flatbuffers_builder_t *B, Flag_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Flag_start(B)
        || Flag_carrier_id_pick(B, t)
        || Flag_x_pick(B, t)
        || Flag_y_pick(B, t)
        || Flag_owner_id_pick(B, t)
        || Flag_is_carried_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Flag_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, EntityUpdate_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), EntityUpdate)
__flatbuffers_build_struct_field(1, flatbuffers_, EntityUpdate_position, Vec2, 8, 4, EntityUpdate)
__flatbuffers_build_struct_field(2, flatbuffers_, EntityUpdate_linear_velocity, Vec2, 8, 4, EntityUpdate)
__flatbuffers_build_scalar_field(3, flatbuffers_, EntityUpdate_rotation, flatbuffers_float, float, 4, 4, 0.00000000f, EntityUpdate)
__flatbuffers_build_scalar_field(4, flatbuffers_, EntityUpdate_is_commandable, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), EntityUpdate)
__flatbuffers_build_vector_field(5, flatbuffers_, EntityUpdate_block_hit_updates, BlockHitUpdate, BlockHitUpdate_t, EntityUpdate)
__flatbuffers_build_vector_field(6, flatbuffers_, EntityUpdate_thruster_updates, ThrusterUpdate, ThrusterUpdate_t, EntityUpdate)
__flatbuffers_build_vector_field(7, flatbuffers_, EntityUpdate_shield_updates, ShieldUpdate, ShieldUpdate_t, EntityUpdate)
__flatbuffers_build_vector_field(8, flatbuffers_, EntityUpdate_missile_slot_updates, MissileSlotUpdate, MissileSlotUpdate_t, EntityUpdate)
__flatbuffers_build_vector_field(9, flatbuffers_, EntityUpdate_turret_updates, TurretUpdate, TurretUpdate_t, EntityUpdate)

static inline EntityUpdate_ref_t EntityUpdate_create(flatbuffers_builder_t *B __EntityUpdate_formal_args)
{
    if (EntityUpdate_start(B)
        || EntityUpdate_id_add(B, v0)
        || EntityUpdate_position_add(B, v1)
        || EntityUpdate_linear_velocity_add(B, v2)
        || EntityUpdate_rotation_add(B, v3)
        || EntityUpdate_block_hit_updates_add(B, v5)
        || EntityUpdate_thruster_updates_add(B, v6)
        || EntityUpdate_shield_updates_add(B, v7)
        || EntityUpdate_missile_slot_updates_add(B, v8)
        || EntityUpdate_turret_updates_add(B, v9)
        || EntityUpdate_is_commandable_add(B, v4)) {
        return 0;
    }
    return EntityUpdate_end(B);
}

static EntityUpdate_ref_t EntityUpdate_clone(flatbuffers_builder_t *B, EntityUpdate_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (EntityUpdate_start(B)
        || EntityUpdate_id_pick(B, t)
        || EntityUpdate_position_pick(B, t)
        || EntityUpdate_linear_velocity_pick(B, t)
        || EntityUpdate_rotation_pick(B, t)
        || EntityUpdate_block_hit_updates_pick(B, t)
        || EntityUpdate_thruster_updates_pick(B, t)
        || EntityUpdate_shield_updates_pick(B, t)
        || EntityUpdate_missile_slot_updates_pick(B, t)
        || EntityUpdate_turret_updates_pick(B, t)
        || EntityUpdate_is_commandable_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, EntityUpdate_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, SingleBlockEntityUpdate_id, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), SingleBlockEntityUpdate)
__flatbuffers_build_struct_field(1, flatbuffers_, SingleBlockEntityUpdate_position, Vec2, 8, 4, SingleBlockEntityUpdate)
__flatbuffers_build_struct_field(2, flatbuffers_, SingleBlockEntityUpdate_linear_velocity, Vec2, 8, 4, SingleBlockEntityUpdate)
__flatbuffers_build_scalar_field(3, flatbuffers_, SingleBlockEntityUpdate_rotation, flatbuffers_float, float, 4, 4, 0.00000000f, SingleBlockEntityUpdate)
__flatbuffers_build_scalar_field(4, flatbuffers_, SingleBlockEntityUpdate_hitpoints, flatbuffers_float, float, 4, 4, 0.00000000f, SingleBlockEntityUpdate)
__flatbuffers_build_scalar_field(5, flatbuffers_, SingleBlockEntityUpdate_turret_rotation, flatbuffers_float, float, 4, 4, 0.00000000f, SingleBlockEntityUpdate)
__flatbuffers_build_scalar_field(6, flatbuffers_, SingleBlockEntityUpdate_applied_thrust, flatbuffers_float, float, 4, 4, 0.00000000f, SingleBlockEntityUpdate)

static inline SingleBlockEntityUpdate_ref_t SingleBlockEntityUpdate_create(flatbuffers_builder_t *B __SingleBlockEntityUpdate_formal_args)
{
    if (SingleBlockEntityUpdate_start(B)
        || SingleBlockEntityUpdate_id_add(B, v0)
        || SingleBlockEntityUpdate_position_add(B, v1)
        || SingleBlockEntityUpdate_linear_velocity_add(B, v2)
        || SingleBlockEntityUpdate_rotation_add(B, v3)
        || SingleBlockEntityUpdate_hitpoints_add(B, v4)
        || SingleBlockEntityUpdate_turret_rotation_add(B, v5)
        || SingleBlockEntityUpdate_applied_thrust_add(B, v6)) {
        return 0;
    }
    return SingleBlockEntityUpdate_end(B);
}

static SingleBlockEntityUpdate_ref_t SingleBlockEntityUpdate_clone(flatbuffers_builder_t *B, SingleBlockEntityUpdate_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (SingleBlockEntityUpdate_start(B)
        || SingleBlockEntityUpdate_id_pick(B, t)
        || SingleBlockEntityUpdate_position_pick(B, t)
        || SingleBlockEntityUpdate_linear_velocity_pick(B, t)
        || SingleBlockEntityUpdate_rotation_pick(B, t)
        || SingleBlockEntityUpdate_hitpoints_pick(B, t)
        || SingleBlockEntityUpdate_turret_rotation_pick(B, t)
        || SingleBlockEntityUpdate_applied_thrust_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, SingleBlockEntityUpdate_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, RegularConvexPolygon_radius, flatbuffers_float, float, 4, 4, 0.00000000f, RegularConvexPolygon)
__flatbuffers_build_scalar_field(1, flatbuffers_, RegularConvexPolygon_num_sides, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), RegularConvexPolygon)

static inline RegularConvexPolygon_ref_t RegularConvexPolygon_create(flatbuffers_builder_t *B __RegularConvexPolygon_formal_args)
{
    if (RegularConvexPolygon_start(B)
        || RegularConvexPolygon_radius_add(B, v0)
        || RegularConvexPolygon_num_sides_add(B, v1)) {
        return 0;
    }
    return RegularConvexPolygon_end(B);
}

static RegularConvexPolygon_ref_t RegularConvexPolygon_clone(flatbuffers_builder_t *B, RegularConvexPolygon_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (RegularConvexPolygon_start(B)
        || RegularConvexPolygon_radius_pick(B, t)
        || RegularConvexPolygon_num_sides_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, RegularConvexPolygon_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, GameStartingParams_my_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), GameStartingParams)
__flatbuffers_build_scalar_field(1, flatbuffers_, GameStartingParams_random_seed, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), GameStartingParams)
__flatbuffers_build_scalar_field(2, flatbuffers_, GameStartingParams_memory_capacity, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), GameStartingParams)
__flatbuffers_build_union_field(4, flatbuffers_, GameStartingParams_arena_bounds, ArenaBounds, GameStartingParams)
__flatbuffers_build_union_table_value_field(flatbuffers_, GameStartingParams_arena_bounds, ArenaBounds, regular_convex_polygon, RegularConvexPolygon)
__flatbuffers_build_scalar_field(5, flatbuffers_, GameStartingParams_fuel_per_step, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), GameStartingParams)

static inline GameStartingParams_ref_t GameStartingParams_create(flatbuffers_builder_t *B __GameStartingParams_formal_args)
{
    if (GameStartingParams_start(B)
        || GameStartingParams_random_seed_add(B, v1)
        || GameStartingParams_memory_capacity_add(B, v2)
        || GameStartingParams_fuel_per_step_add(B, v5)
        || GameStartingParams_arena_bounds_add_value(B, v4)
        || GameStartingParams_my_id_add(B, v0)
        || GameStartingParams_arena_bounds_add_type(B, v4.type)) {
        return 0;
    }
    return GameStartingParams_end(B);
}

static GameStartingParams_ref_t GameStartingParams_clone(flatbuffers_builder_t *B, GameStartingParams_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (GameStartingParams_start(B)
        || GameStartingParams_random_seed_pick(B, t)
        || GameStartingParams_memory_capacity_pick(B, t)
        || GameStartingParams_fuel_per_step_pick(B, t)
        || GameStartingParams_arena_bounds_pick(B, t)
        || GameStartingParams_my_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, GameStartingParams_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, GameStateDelta_flag_updates, Flag, GameStateDelta)
__flatbuffers_build_table_vector_field(1, flatbuffers_, GameStateDelta_new_entities, Entity, GameStateDelta)
__flatbuffers_build_table_vector_field(2, flatbuffers_, GameStateDelta_entity_updates, EntityUpdate, GameStateDelta)
__flatbuffers_build_table_vector_field(3, flatbuffers_, GameStateDelta_single_block_entity_updates, SingleBlockEntityUpdate, GameStateDelta)
__flatbuffers_build_vector_field(4, flatbuffers_, GameStateDelta_dead_entities, flatbuffers_uint64, uint64_t, GameStateDelta)
__flatbuffers_build_table_vector_field(5, flatbuffers_, GameStateDelta_new_projectiles, Projectile, GameStateDelta)
__flatbuffers_build_table_vector_field(6, flatbuffers_, GameStateDelta_dead_projectiles, DeadProjectile, GameStateDelta)
__flatbuffers_build_table_vector_field(7, flatbuffers_, GameStateDelta_explosions, Explosion, GameStateDelta)

static inline GameStateDelta_ref_t GameStateDelta_create(flatbuffers_builder_t *B __GameStateDelta_formal_args)
{
    if (GameStateDelta_start(B)
        || GameStateDelta_flag_updates_add(B, v0)
        || GameStateDelta_new_entities_add(B, v1)
        || GameStateDelta_entity_updates_add(B, v2)
        || GameStateDelta_single_block_entity_updates_add(B, v3)
        || GameStateDelta_dead_entities_add(B, v4)
        || GameStateDelta_new_projectiles_add(B, v5)
        || GameStateDelta_dead_projectiles_add(B, v6)
        || GameStateDelta_explosions_add(B, v7)) {
        return 0;
    }
    return GameStateDelta_end(B);
}

static GameStateDelta_ref_t GameStateDelta_clone(flatbuffers_builder_t *B, GameStateDelta_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (GameStateDelta_start(B)
        || GameStateDelta_flag_updates_pick(B, t)
        || GameStateDelta_new_entities_pick(B, t)
        || GameStateDelta_entity_updates_pick(B, t)
        || GameStateDelta_single_block_entity_updates_pick(B, t)
        || GameStateDelta_dead_entities_pick(B, t)
        || GameStateDelta_new_projectiles_pick(B, t)
        || GameStateDelta_dead_projectiles_pick(B, t)
        || GameStateDelta_explosions_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, GameStateDelta_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, EndGame_winner_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), EndGame)

static inline EndGame_ref_t EndGame_create(flatbuffers_builder_t *B __EndGame_formal_args)
{
    if (EndGame_start(B)
        || EndGame_winner_id_add(B, v0)) {
        return 0;
    }
    return EndGame_end(B);
}

static EndGame_ref_t EndGame_clone(flatbuffers_builder_t *B, EndGame_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (EndGame_start(B)
        || EndGame_winner_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, EndGame_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, Points_points, Vec2, Vec2_t, Points)

static inline Points_ref_t Points_create(flatbuffers_builder_t *B __Points_formal_args)
{
    if (Points_start(B)
        || Points_points_add(B, v0)) {
        return 0;
    }
    return Points_end(B);
}

static Points_ref_t Points_clone(flatbuffers_builder_t *B, Points_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Points_start(B)
        || Points_points_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Points_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* GAME_STATE_BUILDER_H */
